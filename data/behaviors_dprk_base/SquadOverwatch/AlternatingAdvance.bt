{
  "name": "wait and advance",
  "id": "2f63bc08-de32-4fdb-bd76-ff5f64026b56",
  "type": "supervisedParallel",
  "subtrees": [
    {
      "name": "noone alive = fail",
      "id": "7ead6ce7-aff1-4bc3-8f4f-bf746d5124f7",
      "type": "selector",
      "subtrees": [
        {
          "name": "If Data Valid table",
          "id": "a10e69f8-93da-484e-8f1d-12346a715f9b",
          "type": "selector",
          "subtrees": [
            {
              "name": "Make data",
              "id": "55f63cbc-df00-4df6-aa95-51060e45bf51",
              "type": "sequence",
              "subtrees": [
                {
                  "name": "Set Up Team Data",
                  "id": "fbe9c14e-5e2c-4799-9dbb-877916789599",
                  "type": "scriptAction",
                  "script": [
                    "loc.aliveFireTeams = {}",
                    "loc.singleManTeams = {}",
                    "",
                    "local teamIndex = 1  -- Start at 1 if no leader is found",
                    "local singleTeamIndex = 1",
                    "local fireTeamCount = self:GetChildGroupCount()",
                    "",
                    "-- If we have a leader, place the leader's team first and start from index 2",
                    "if loc.foundLeaderGroup then",
                    "    loc.aliveFireTeams[1] = loc.foundLeaderGroup",
                    "    DebugLog(teamIndex..\": Leader group found, placing it first.\")",
                    "    teamIndex = 2    ",
                    "else",
                    "    DebugLog(\"No leader found, starting team collection from index 1.\")",
                    "end",
                    "",
                    "for i = 1, fireTeamCount do    ",
                    "    local iGroup = self:GetChildGroup(i - 1)",
                    "    ",
                    "    -- Skip the leader's group if it was found",
                    "    if iGroup ~= loc.foundLeaderGroup then",
                    "        -- Count alive soldiers",
                    "        local entityCount = iGroup:GetEntityCount()",
                    "        local livingSoldiers = 0",
                    "",
                    "        for e = 1, entityCount do",
                    "            local soldier = iGroup:GetEntity(e - 1)",
                    "            if soldier and soldier:IsAlive() then",
                    "                livingSoldiers = livingSoldiers + 1",
                    "            end",
                    "        end",
                    "",
                    "        if livingSoldiers > 1 then",
                    "            -- Add fire teams with 2+ alive soldiers to aliveFireTeams",
                    "            loc.aliveFireTeams[teamIndex] = iGroup",
                    "            teamIndex = teamIndex + 1",
                    "            DebugLog(teamIndex..\": Added fire team with \" .. livingSoldiers .. \" alive soldiers.\")",
                    "        elseif livingSoldiers == 1 then",
                    "            -- Store single-man fire teams separately",
                    "            loc.singleManTeams[singleTeamIndex] = iGroup",
                    "            singleTeamIndex = singleTeamIndex + 1",
                    "            DebugLog(singleTeamIndex..\": Added single-man fire team.\")",
                    "        end        ",
                    "    end   ",
                    "end",
                    "",
                    "DebugLog(\"Teams Set Up. Alive Teams: \" .. #loc.aliveFireTeams .. \", Single Teams: \" .. #loc.singleManTeams)"
                  ]
                },
                {
                  "name": "Set Up Team Data",
                  "id": "be611d03-218d-462f-9034-92e4dceab48d",
                  "type": "scriptAction",
                  "script": [
                    "loc.aliveFireTeams = {}",
                    "loc.singleManTeams = {}",
                    "",
                    "local teamIndex = 1  -- Start at 1 if no leader is found",
                    "local singleTeamIndex = 1",
                    "local fireTeamCount = self:GetChildGroupCount()",
                    "",
                    "-- If we have a leader, place the leader's team first and start from index 2",
                    "if loc.foundLeaderGroup then",
                    "    loc.aliveFireTeams[1] = loc.foundLeaderGroup",
                    "    --DebugLog(teamIndex..\": Leader group found, placing it first.\")",
                    "    teamIndex = 2    ",
                    "else",
                    "    --DebugLog(\"No leader found, starting team collection from index 1.\")",
                    "end",
                    "",
                    "for i = 1, fireTeamCount do    ",
                    "    local iGroup = self:GetChildGroup(i - 1)",
                    "    ",
                    "    -- Skip the leader's group if it was found",
                    "    if iGroup ~= loc.foundLeaderGroup then",
                    "        -- Count alive soldiers",
                    "        local entityCount = iGroup:GetEntityCount()",
                    "        local livingSoldiers = 0",
                    "",
                    "        for e = 1, entityCount do",
                    "            local soldier = iGroup:GetEntity(e - 1)",
                    "            if soldier and soldier:IsAlive() then",
                    "                livingSoldiers = livingSoldiers + 1",
                    "            end",
                    "        end",
                    "",
                    "        if livingSoldiers > 1 then",
                    "            -- Add fire teams with 2+ alive soldiers to aliveFireTeams",
                    "            loc.aliveFireTeams[teamIndex] = iGroup",
                    "            teamIndex = teamIndex + 1",
                    "            --DebugLog(teamIndex..\": Added fire team with \" .. livingSoldiers .. \" alive soldiers.\")",
                    "        elseif livingSoldiers == 1 then",
                    "            -- Store single-man fire teams separately",
                    "            loc.singleManTeams[singleTeamIndex] = iGroup",
                    "            singleTeamIndex = singleTeamIndex + 1",
                    "            --DebugLog(singleTeamIndex..\": Added single-man fire team.\")",
                    "        end        ",
                    "    end   ",
                    "end",
                    "",
                    "DebugLog(\"Teams Set Up. Alive Teams: \" .. #loc.aliveFireTeams .. \", Single Teams: \" .. #loc.singleManTeams)"
                  ]
                },
                {
                  "name": "Wait to Find Path",
                  "id": "6615f19c-0b2d-4999-8535-4330c0ae05f9",
                  "type": "sequence",
                  "subtrees": [
                    {
                      "name": "Ask for Path",
                      "id": "62bc8a82-9e77-4d25-845b-e8831846d782",
                      "type": "scriptAction",
                      "decorators": [
                        {
                          "id": "e90cdbd8-4571-48b0-b45b-ea154bfc3ed8",
                          "type": "waitUntil",
                          "name": "Wait Until Destination Given",
                          "condition": [
                            "return arg.orderData.destination ~= nil"
                          ]
                        }
                      ],
                      "script": [
                        "if loc.foundLeader then",
                        "    loc.pathQuery = FindPath(loc.foundLeader:GetPosition(), arg.orderData.destination)",
                        "else",
                        "    loc.pathQuery = FindPath(self:GetLeaderGroup():GetLeader():GetPosition(), arg.orderData.destination)",
                        "end"
                      ]
                    },
                    {
                      "name": "Save Found Path",
                      "id": "78a3672b-ffea-4934-b910-30d7679b0e04",
                      "type": "scriptAction",
                      "decorators": [
                        {
                          "id": "d421f2f8-8d8a-4b22-b7ed-bf0d2225bd16",
                          "type": "waitUntil",
                          "name": "Wait Until Path Ready",
                          "condition": [
                            "return loc.pathQuery:IsReady()"
                          ]
                        }
                      ],
                      "script": [
                        "loc.path = loc.pathQuery:Value()",
                        "loc.pathQuery = nil",
                        "",
                        "DebugLog(\"Path Set Up\")"
                      ]
                    }
                  ]
                },
                {
                  "name": "Set Up PathPoints",
                  "id": "2e806ddd-9d6a-4182-89b7-316eb491aab3",
                  "type": "scriptAction",
                  "script": [
                    "loc.controlPoints = {}",
                    "",
                    "local pathLen = loc.path:Length()",
                    "local segmentCount = math.floor(pathLen / loc.controlPointDistance)",
                    "",
                    "if segmentCount < 1 then ",
                    "    loc.controlPoints[1] = arg.orderData.destination",
                    "    DebugLog(\"Path Points Set Up\")",
                    "    return",
                    "end",
                    "",
                    "for iSeg=1,segmentCount do",
                    "    local newPoint = loc.path:PositionAlongPath(loc.controlPointDistance*iSeg)",
                    "    loc.controlPoints[iSeg] = newPoint",
                    "end",
                    "",
                    "if loc.controlPoints[segmentCount]:Distance(arg.orderData.destination) > loc.controlPointDistance/2 then",
                    "   loc.controlPoints[segmentCount+1] = arg.orderData.destination",
                    "else",
                    "   loc.controlPoints[segmentCount] = arg.orderData.destination",
                    "end",
                    "",
                    "DebugLog(\"Path Points Set Up\")"
                  ]
                },
                {
                  "name": "Set Up Orders",
                  "id": "04c0cc53-4f97-4860-8b08-11c2f9206bb5",
                  "type": "scriptAction",
                  "script": [
                    "-- Initialize variables",
                    "local teamIndex = 1 -- To iterate over aliveFireTeams cyclically",
                    "local orderIndex = 1 -- To keep track of the index in preparedOrders",
                    "loc.preparedOrders = {}",
                    "",
                    "--DebugLog(\"Alive fire teams detected: \"..#loc.aliveFireTeams)",
                    "",
                    "-- Iterate over all controlPoints",
                    "for _, controlPoint in ipairs(loc.controlPoints) do",
                    "    -- Prepare an order for the current controlPoint",
                    "    local preparedOrder = {}",
                    "",
                    "    -- Set up subOrderData for the Advance order",
                    "    preparedOrder[\"subOrderData\"] = {",
                    "        orderName = \"Advance\",",
                    "        destination = controlPoint",
                    "    }",
                    "",
                    "    -- Assign the current fire team to the order",
                    "    local currentTeam = loc.aliveFireTeams[teamIndex]",
                    "    preparedOrder[\"subordinates\"] = {currentTeam}",
                    "",
                    "    -- Set subordinateData to an empty table",
                    "    preparedOrder[\"subordinateData\"] = {}",
                    "",
                    "    -- Store the prepared order into loc.preparedOrders",
                    "    loc.preparedOrders[orderIndex] = preparedOrder",
                    "    orderIndex = orderIndex + 1",
                    "",
                    "    -- Move to the next team in a cyclic manner",
                    "    teamIndex = teamIndex + 1",
                    "    if teamIndex > #loc.aliveFireTeams then",
                    "        teamIndex = 1 -- Loop back to the first team",
                    "    end",
                    "end",
                    "",
                    "-- Determine the final destination variations",
                    "local finalControlPoint = loc.controlPoints[#loc.controlPoints]",
                    "",
                    "-- Compute direction 1 meter before the path ends",
                    "local headingAtEnd = loc.path:DirectionAlongPath(loc.path:Length() - 1)",
                    "",
                    "-- Rotate by 90 degrees to get a perpendicular direction",
                    "local rightVector = MathExt.HeadingToVec3(headingAtEnd + 90):Normalized()",
                    "",
                    "-- Assign unique positions for each team near the final destination",
                    "for i = 1, #loc.aliveFireTeams - 1 do",
                    "    local preparedOrder = {}",
                    "",
                    "    -- Offset each team by 15 meters along the rightVector",
                    "    local offset = (i * 30) * rightVector",
                    "    -- local offset = rightVector * Vec3(i * 15, i * 15, i * 15)",
                    "    local teamDestination = finalControlPoint + offset",
                    "",
                    "    -- Set up subOrderData for the Advance order",
                    "    preparedOrder[\"subOrderData\"] = {",
                    "        orderName = \"Advance\",",
                    "        destination = teamDestination",
                    "    }",
                    "",
                    "    -- Assign the current fire team to the order",
                    "    local currentTeam = loc.aliveFireTeams[teamIndex]",
                    "    preparedOrder[\"subordinates\"] = {currentTeam}",
                    "",
                    "    -- Set subordinateData to an empty table",
                    "    preparedOrder[\"subordinateData\"] = {}",
                    "",
                    "    -- Store the prepared order into loc.preparedOrders",
                    "    loc.preparedOrders[orderIndex] = preparedOrder",
                    "    orderIndex = orderIndex + 1",
                    "",
                    "    -- Cycle through the teams",
                    "    teamIndex = teamIndex + 1",
                    "    if teamIndex > #loc.aliveFireTeams then",
                    "        teamIndex = 1 -- Loop back to the first team",
                    "    end",
                    "end",
                    "",
                    "-- Set loc.orderToPerformIndex to 1",
                    "loc.orderToPerformIndex = 1",
                    "",
                    "-- Set loc.maxOrderIndex to the total number of prepared orders",
                    "loc.maxOrderIndex = orderIndex - 1",
                    "",
                    "-- Debug print for verification (remove in production)",
                    "for i, order in ipairs(loc.preparedOrders) do",
                    "    DebugLog(\"Order \" .. i .. \":\")",
                    "    DebugLog(\"  Order Name: \" .. order.subOrderData.orderName)",
                    "    DebugLog(\"  Destination: \" .. tostring(order.subOrderData.destination))",
                    "    DebugLog(\"  Subordinates: \" .. table.concat(order.subordinates, \", \"))",
                    "end",
                    "",
                    "-- Print final settings",
                    "DebugLog(\"orderToPerformIndex: \" .. loc.orderToPerformIndex)",
                    "DebugLog(\"maxOrderIndex: \" .. loc.maxOrderIndex)",
                    "",
                    "DebugLog(\"Orders Set Up\")"
                  ]
                },
                {
                  "name": "Set All Data Valid",
                  "id": "7a1d3809-0fa4-4ca7-82a4-467442240510",
                  "type": "scriptAction",
                  "script": [
                    "loc.allDataValid = true"
                  ]
                },
                {
                  "name": "Wait Forever",
                  "id": "1f352893-81d8-4254-96d5-8c035946b084",
                  "type": "waitForever"
                }
              ],
              "decorators": [
                {
                  "id": "3009788e-bff3-43b3-b7fa-0193e33b1774",
                  "type": "scriptCondition",
                  "name": "If not all data valid",
                  "script": [
                    "if loc.allDataValid == false then",
                    "    return true",
                    "end",
                    "return false"
                  ]
                }
              ]
            },
            {
              "name": "Rush or alternating advance?",
              "id": "41b0a54a-8940-4a8b-b760-0f7c41bdc74c",
              "type": "selector",
              "subtrees": [
                {
                  "name": "all advance to destination",
                  "id": "20870fcb-6112-48c4-b0dc-f9e7c1e082f6",
                  "type": "sequence",
                  "subtrees": [
                    {
                      "name": "prepare order data",
                      "id": "2e3ca50d-1c9c-405e-b759-6c0aa07c5591",
                      "type": "scriptAction",
                      "script": [
                        "-- Get order destination",
                        "local targetDestination = arg.orderData.destination",
                        "if targetDestination == nil then",
                        "    DebugLog(\"ERROR: arg.orderData.destination is NIL\")",
                        "    return",
                        "end",
                        "",
                        "-- Initialize order storage for Advance orders",
                        "loc.subOrderData = { orderName = \"Advance\", destination = targetDestination }",
                        "loc.subordinates = {}",
                        "loc.subordinateData = InternalTable()",
                        "",
                        "-- Function to process teams and assign orders",
                        "local function addTeamToAdvanceOrder(team)",
                        "    if team ~= loc.foundLeaderGroup then",
                        "        local subordinate = standard_behaviors.GetVehicleOrSelf(team)",
                        "        table.insert(loc.subordinates, subordinate)",
                        "        loc.subordinateData[subordinate] = {",
                        "            destination = closestLeaderPosition",
                        "        }",
                        "    end",
                        "end",
                        "",
                        "-- Assign Advance orders to all alive fire teams except the leader's team",
                        "for _, team in ipairs(loc.aliveFireTeams) do",
                        "    addTeamToAdvanceOrder(team)",
                        "end",
                        "",
                        "-- Assign Advance orders to all single-man teams except the leader's team",
                        "for _, team in ipairs(loc.singleManTeams) do",
                        "    addTeamToAdvanceOrder(team)",
                        "end",
                        "",
                        "-- Debug Logs",
                        "DebugLog(\"Setting all \" .. #loc.subordinates .. \" teams to RUSH to the destination.\")"
                      ]
                    },
                    {
                      "name": "Send rushing to the end",
                      "id": "3c066406-8d2a-4695-a4f2-951f98044120",
                      "type": "reference",
                      "target": [
                        "standard_behaviors",
                        "ExecuteSubordinateOrder"
                      ],
                      "arguments": {
                        "orderData": "return loc.subOrderData",
                        "subordinates": "return loc.subordinates",
                        "subordinateData": "return loc.subordinateData",
                        "update": "return false"
                      }
                    },
                    {
                      "name": "<unnamed>",
                      "id": "1c1d329e-2a84-43c2-85f7-98e31cb615de",
                      "type": "sequence",
                      "subtrees": [
                        {
                          "name": "log success",
                          "id": "9d614210-49b0-4e08-868b-932c73ebc005",
                          "type": "scriptAction",
                          "script": [
                            "DebugLog(\"SUCEEDING - everyone advanced to destination\")"
                          ]
                        },
                        {
                          "name": "Succeed",
                          "id": "0bcd0da4-4e2c-404a-94f5-b5be44d2c36f",
                          "type": "success"
                        }
                      ]
                    }
                  ],
                  "decorators": [
                    {
                      "id": "60bd4eea-2a92-4ae5-ae5e-f802a78daefb",
                      "type": "scriptCondition",
                      "name": "No leader?",
                      "script": [
                        "return loc.foundLeader == nil"
                      ]
                    }
                  ]
                },
                {
                  "name": "Give Orders",
                  "id": "272cbfe9-3da4-4bb5-83b4-9c06f0eca175",
                  "type": "parallel",
                  "subtrees": [
                    {
                      "name": "Give More Orders?",
                      "id": "06f2ae26-045e-4703-858a-148627cd28e7",
                      "type": "selector",
                      "subtrees": [
                        {
                          "name": "prepare and send order",
                          "id": "0cfe8aec-4d9f-4045-9eda-c3f24c39d079",
                          "type": "sequence",
                          "subtrees": [
                            {
                              "name": "prepare order data",
                              "id": "89cbc79c-f003-400b-9827-9b1d8dc63d72",
                              "type": "scriptAction",
                              "script": [
                                "loc.subOrderData = loc.preparedOrders[loc.orderToPerformIndex][\"subOrderData\"]",
                                "loc.subordinates = loc.preparedOrders[loc.orderToPerformIndex][\"subordinates\"]",
                                "loc.subordinateData = loc.preparedOrders[loc.orderToPerformIndex][\"subordinateData\"]",
                                "",
                                "DebugLog(\"Sending order \"..loc.orderToPerformIndex)",
                                "",
                                "",
                                "-- loc.subOrderData = {orderName = \"Advance\", destination = arg.orderData.destination}",
                                "-- loc.subordinates = {loc.foundLeaderGroup}",
                                "-- loc.subordinateData = {}",
                                "-- loc.subordinateData = {destination = arg.orderData.destination}"
                              ]
                            },
                            {
                              "name": "Typical AA advance order",
                              "id": "95a0a875-918d-4777-ae98-2e1c6edf09ea",
                              "type": "reference",
                              "target": [
                                "standard_behaviors",
                                "ExecuteSubordinateOrder"
                              ],
                              "arguments": {
                                "orderData": "return loc.subOrderData",
                                "subordinates": "return loc.subordinates",
                                "subordinateData": "return loc.subordinateData",
                                "update": "return false"
                              }
                            },
                            {
                              "name": "Increase Index",
                              "id": "ab815002-566d-4eec-b3fe-0c7bae85fe1c",
                              "type": "scriptAction",
                              "script": [
                                "DebugLog(\"Order \"..loc.orderToPerformIndex..\" completed. Increasing order index to \"..loc.orderToPerformIndex + 1)",
                                "loc.orderToPerformIndex = loc.orderToPerformIndex + 1"
                              ]
                            }
                          ],
                          "decorators": [
                            {
                              "id": "92ed1c3e-5830-4c36-8b81-abc8b7c3ce93",
                              "type": "scriptCondition",
                              "name": "More orders to give?",
                              "script": [
                                "if loc.orderToPerformIndex > loc.maxOrderIndex then",
                                "    return false",
                                "end",
                                "return true"
                              ]
                            },
                            {
                              "id": "f17395fe-8740-4c9e-8485-059f90ccd565",
                              "type": "loopForever",
                              "name": "loop forever"
                            }
                          ]
                        },
                        {
                          "name": "<unnamed>",
                          "id": "df913449-618a-43a3-8564-579dc38dd892",
                          "type": "sequence",
                          "subtrees": [
                            {
                              "name": "log success",
                              "id": "e8283e40-0307-49d6-96e4-d2967f1397e2",
                              "type": "scriptAction",
                              "script": [
                                "DebugLog(\"SUCEEDING - no more orders to give\")"
                              ]
                            },
                            {
                              "name": "Succeed",
                              "id": "cbb3ca93-43b2-49da-a36f-a67a46e88d62",
                              "type": "success"
                            }
                          ]
                        }
                      ],
                      "active": true
                    },
                    {
                      "name": "single teams follow leader",
                      "id": "b6a7f2d1-64ca-4a05-b2da-41e48f93c769",
                      "type": "sequence",
                      "subtrees": [
                        {
                          "name": "Prepare single teams order data",
                          "id": "342b581c-c830-4ed3-bd8d-48d180bd9cad",
                          "type": "scriptAction",
                          "script": [
                            "loc.subOrderDataFollow = {orderName = \"Follow\", followedUnit = loc.foundLeader}",
                            "loc.subordinatesFollow = {}",
                            "loc.subordinateDataFollow = InternalTable()",
                            "for i, fireTeam in ipairs(loc.singleManTeams) do",
                            "    if fireTeam:GetEntityCount() == 1 then",
                            "        local subordinateFollow = standard_behaviors.GetVehicleOrSelf(fireTeam)",
                            "        table.insert(loc.subordinatesFollow, subordinateFollow)",
                            "        loc.subordinateDataFollow[subordinateFollow] = {",
                            "            followedUnit = loc.foundLeader,",
                            "            spacing = 50",
                            "        }",
                            "    else",
                            "        local subordinateFollow = standard_behaviors.GetVehicleOrSelf(fireTeam)",
                            "        table.insert(loc.subordinatesFollow, subordinateFollow)",
                            "        loc.subordinateDataFollow[subordinateFollow] = {",
                            "            followedUnit = loc.foundLeader",
                            "        }",
                            "    end",
                            "end",
                            "",
                            "DebugLog(\"Setting all \".. #loc.singleManTeams ..\" single man teams to follow the leader\")"
                          ]
                        },
                        {
                          "name": "Single Man Team Follows",
                          "id": "a97fbea3-02f9-4ac0-af33-d87f77e0ade8",
                          "type": "reference",
                          "target": [
                            "standard_behaviors",
                            "ExecuteSubordinateOrder"
                          ],
                          "arguments": {
                            "orderData": "return loc.subOrderDataFollow",
                            "subordinates": "return loc.subordinatesFollow",
                            "subordinateData": "return loc.subordinateDataFollow",
                            "update": "return false"
                          }
                        }
                      ]
                    }
                  ],
                  "waitForAll": false
                }
              ],
              "active": true
            }
          ],
          "decorators": [
            {
              "id": "33ebf06d-12b4-4277-a072-a3c37e78a9c7",
              "type": "scriptCondition",
              "name": "?anyone alive?",
              "script": [
                "local fireTeamCount = self:GetChildGroupCount()",
                "",
                "for i = 1, fireTeamCount do    ",
                "    local iGroup = self:GetChildGroup(i - 1)",
                "    local soliderCount = iGroup:GetEntityCount()",
                "",
                "    for s = 1, soliderCount do",
                "        local soldier = iGroup:GetEntity(s - 1)",
                "        if soldier and soldier:IsAlive() then",
                "            --DebugLog(\"At least one soldier is alive in group \"..i)",
                "            return true",
                "        end",
                "    end",
                "end",
                "",
                "DebugLog(\"No soldiers are alive.\")",
                "return false"
              ]
            }
          ],
          "active": true
        },
        {
          "name": "<unnamed>",
          "id": "8fbafd5d-20a4-45d5-98b3-a722a56fb701",
          "type": "sequence",
          "subtrees": [
            {
              "name": "log fail",
              "id": "03c5dd2b-569d-4183-acf4-7e49d0d15f70",
              "type": "scriptAction",
              "script": [
                "DebugLog(\"FAILING - noone is alive\")"
              ]
            },
            {
              "name": "Fail",
              "id": "91f75bf4-774f-49a8-a256-aa9f16e2bc6c",
              "type": "fail"
            }
          ]
        }
      ],
      "decorators": [
        {
          "id": "b8ea647a-f622-4fc6-b672-338064d16491",
          "type": "scriptAction",
          "name": "Find Leader",
          "script": [
            "-- If we already have a valid leader group, no need to recheck",
            "if loc.foundLeader ~= nil and loc.foundLeaderGroup ~= nil then",
            "    -- If loc.foundLeaderGroup has 2+ alive soldiers, return true",
            "    local aliveCount = 0",
            "    for s = 1, loc.foundLeaderGroup:GetEntityCount() do",
            "        local soldier = loc.foundLeaderGroup:GetEntity(s - 1)",
            "        if soldier and soldier:IsAlive() then",
            "            aliveCount = aliveCount + 1",
            "        end",
            "    end",
            "    if aliveCount >= 2 then",
            "        return",
            "    end",
            "",
            "    -- Otherwise, invalidate loc.allDataValid and look for a new leader",
            "    loc.allDataValid = false",
            "end",
            "",
            "",
            "-- Find the closest viable leader using deterministic logic",
            "loc.foundLeader = nil",
            "loc.foundLeaderGroup = nil",
            "local closestLeaderPosition = nil",
            "local minDistance = math.huge",
            "local targetDestination = arg.orderData.destination",
            "",
            "if targetDestination == nil then",
            "    DebugLog(\"ERROR: arg.orderData.destination is NIL\")",
            "    return",
            "end",
            "",
            "-- Iterate over fire teams to find a valid leader",
            "local fireTeamCount = self:GetChildGroupCount()",
            "for i = 1, fireTeamCount do    ",
            "    local iGroup = self:GetChildGroup(i - 1)",
            "    local aliveCount = 0",
            "    local leaderCandidate = nil",
            "",
            "    local soliderCount = iGroup:GetEntityCount()",
            "",
            "    -- Count alive soldiers in the group",
            "    for s = 1, soliderCount do",
            "        local soldier = iGroup:GetEntity(s - 1)",
            "        if soldier and soldier:IsAlive() then",
            "            aliveCount = aliveCount + 1",
            "        end",
            "    end",
            "",
            "    -- Only consider groups with 2 or more alive soldiers",
            "    if aliveCount >= 2 then",
            "        -- Try to get the group leader first",
            "        leaderCandidate = iGroup:GetLeader()",
            "        ",
            "        if leaderCandidate and leaderCandidate:IsAlive() then",
            "            -- If leader is alive, calculate the distance to the target destination",
            "            local leaderPos = leaderCandidate:GetPosition()",
            "            local distance = targetDestination:Distance(leaderPos)",
            "",
            "            if distance < minDistance then",
            "                -- Update closest leader and group if this one is closer",
            "                minDistance = distance",
            "                loc.foundLeader = leaderCandidate",
            "                loc.foundLeaderGroup = iGroup",
            "                closestLeaderPosition = leaderPos",
            "            end",
            "",
            "        -- if leader candidate is nil or dead",
            "        else ",
            "            -- If the leader is dead, find another alive soldier",
            "            for s = 1, soliderCount do",
            "                leaderCandidate = iGroup:GetEntity(s - 1)",
            "                if leaderCandidate and leaderCandidate:IsAlive() then",
            "                    -- Calculate the distance to the target destination",
            "                    local leaderPos = leaderCandidate:GetPosition()",
            "                    local distance = targetDestination:Distance(leaderPos)",
            "",
            "                    if distance < minDistance then",
            "                        -- Update closest leader and group if this one is closer",
            "                        minDistance = distance",
            "                        loc.foundLeader = leaderCandidate",
            "                        loc.foundLeaderGroup = iGroup",
            "                        closestLeaderPosition = leaderPos",
            "                    end",
            "                    break -- Stop once we find an alive soldier to serve as the leader",
            "                end",
            "            end",
            "        end",
            "    end",
            "end",
            "",
            "-- If no valid leader found, return false",
            "if loc.foundLeader == nil then",
            "    DebugLog(\"No leader found\")",
            "    return",
            "end",
            "",
            "-- Successfully found a leader, return true",
            "return"
          ]
        }
      ],
      "active": true
    },
    {
      "name": "Detect single fire teams",
      "id": "7bb0d5c4-3cd5-49ae-b6df-9abbd50b2cd3",
      "type": "sequence",
      "subtrees": [
        {
          "name": "Detect Single Teams",
          "id": "4419ca60-93fc-4049-b895-99a83ba977d9",
          "type": "scriptAction",
          "script": [
            "local fireTeamCount = self:GetChildGroupCount()",
            "",
            "-- Single man team handling",
            "local singleTeamIndex = 1",
            "local singleTeamsCount = #loc.singleManTeams",
            "loc.singleManTeams = {}",
            "",
            "for i = 1, fireTeamCount do",
            "    local iGroup = self:GetChildGroup(i - 1)",
            "    local entityCount = iGroup:GetEntityCount()",
            "    local aliveCount = 0",
            "",
            "    -- Count alive soldiers",
            "    for e = 1, entityCount do",
            "        local entity = iGroup:GetEntity(e - 1) -- Correct method",
            "        if entity and entity:IsAlive() then",
            "            aliveCount = aliveCount + 1",
            "        end",
            "    end",
            "",
            "    -- If only one soldier is alive, it's a single-man team",
            "    if aliveCount == 1 then",
            "        loc.singleManTeams[singleTeamIndex] = iGroup",
            "        singleTeamIndex = singleTeamIndex + 1",
            "        -- DebugLog(\"Found a single living soldier in a team\")",
            "    end",
            "end",
            "",
            "-- Debug Logging",
            "-- DebugLog(\"Expected \" .. singleTeamsCount .. \" single man teams\")",
            "-- DebugLog(\"Found \" .. #loc.singleManTeams .. \" single man teams\")",
            "",
            "if singleTeamsCount ~= #loc.singleManTeams then",
            "    DebugLog(\"...\")",
            "    DebugLog(\"NEW SINGLE MAN TEAM FOUND; expected \" .. singleTeamsCount .. \" and found \" .. #loc.singleManTeams)",
            "    DebugLog(\"Setting data to NOT valid\")",
            "    DebugLog(\"...\")",
            "    loc.allDataValid = false",
            "end"
          ]
        },
        {
          "name": "wait 1s",
          "id": "79f475a1-2d9f-4a8d-931b-c9157f927e4c",
          "type": "wait",
          "time": [
            "return 1"
          ]
        }
      ]
    },
    {
      "name": "Draw current path",
      "id": "ceafd781-ca4d-4c33-9092-ceea2a693ac7",
      "type": "scriptAction",
      "decorators": [
        {
          "id": "a7145aa0-d5cb-464c-a7a7-72e139201ee3",
          "type": "loopForever",
          "name": "Draw path if exists"
        }
      ],
      "script": [
        "if",
        "    loc.path ~= nil",
        "then",
        "    local OFFSET = Vec3(0,0,2) -- draw up",
        "    ai_core_public.draw.Path( -- a package we packed, supplied by PepeAmpere",
        "        loc.path,",
        "        1, 0, 1, 1,",
        "        OFFSET",
        "    )",
        "end"
      ]
    },
    {
      "name": "Draw Control points",
      "id": "2bbe1616-6ec0-491c-8f93-a4a766793b68",
      "type": "scriptAction",
      "decorators": [
        {
          "id": "f80f77d7-6cce-48f6-92ae-9d930bcc5fc5",
          "type": "loopForever",
          "name": "Draw control points"
        }
      ],
      "script": [
        "if",
        "    loc.controlPoints ~= nil",
        "then",
        "    local OFFSET = Vec3(0,0,2) -- draw up",
        "    for i=1,#loc.controlPoints do",
        "        ai_core_public.draw.Circle( -- a package we packed, supplied by PepeAmpere",
        "                loc.controlPoints[i] + OFFSET,",
        "                1,",
        "                1, 0, 1, 1",
        "            )",
        "    end",
        "end"
      ]
    }
  ],
  "unlinked-trees": [
    {
      "name": "If team data",
      "id": "a28e6cd2-d483-4de1-8da9-03fc13c93efd",
      "type": "selector",
      "subtrees": [
        {
          "name": "Set Up Team Data",
          "id": "d5a8f45f-82fc-4090-a05b-4a873ee45920",
          "type": "scriptAction",
          "decorators": [
            {
              "id": "686278f5-3d75-4759-a97c-cf4fdbb04de1",
              "type": "scriptCondition",
              "name": "Not Team Data",
              "script": [
                "return loc.dataValidTable[\"teams\"] ==false"
              ]
            }
          ],
          "script": [
            "loc.aliveFireTeams = {}",
            "loc.singleManTeams = {}",
            "",
            "local teamIndex = 1  -- Start at 1 if no leader is found",
            "local singleTeamIndex = 1",
            "local fireTeamCount = self:GetChildGroupCount()",
            "",
            "-- If we have a leader, place the leader's team first and start from index 2",
            "if loc.foundLeaderGroup then",
            "    loc.aliveFireTeams[1] = loc.foundLeaderGroup",
            "    DebugLog(teamIndex..\": Leader group found, placing it first.\")",
            "    teamIndex = 2    ",
            "else",
            "    DebugLog(\"No leader found, starting team collection from index 1.\")",
            "end",
            "",
            "for i = 1, fireTeamCount do    ",
            "    local iGroup = self:GetChildGroup(i - 1)",
            "    ",
            "    -- Skip the leader's group if it was found",
            "    if iGroup ~= loc.foundLeaderGroup then",
            "        -- Count alive soldiers",
            "        local entityCount = iGroup:GetEntityCount()",
            "        local livingSoldiers = 0",
            "",
            "        for e = 1, entityCount do",
            "            local soldier = iGroup:GetEntity(e - 1)",
            "            if soldier and soldier:IsAlive() then",
            "                livingSoldiers = livingSoldiers + 1",
            "            end",
            "        end",
            "",
            "        if livingSoldiers > 1 then",
            "            -- Add fire teams with 2+ alive soldiers to aliveFireTeams",
            "            loc.aliveFireTeams[teamIndex] = iGroup",
            "            teamIndex = teamIndex + 1",
            "            DebugLog(teamIndex..\": Added fire team with \" .. livingSoldiers .. \" alive soldiers.\")",
            "        elseif livingSoldiers == 1 then",
            "            -- Store single-man fire teams separately",
            "            loc.singleManTeams[singleTeamIndex] = iGroup",
            "            singleTeamIndex = singleTeamIndex + 1",
            "            DebugLog(singleTeamIndex..\": Added single-man fire team.\")",
            "        end        ",
            "    end   ",
            "end",
            "",
            "-- Set data to valid",
            "loc.dataValidTable[\"teams\"] = true",
            "DebugLog(\"Teams Set Up. Alive Teams: \" .. #loc.aliveFireTeams .. \", Single Teams: \" .. #loc.singleManTeams)"
          ]
        },
        {
          "name": "If path data",
          "id": "250000ce-93b0-4b68-93db-84459a7db542",
          "type": "selector",
          "subtrees": [
            {
              "name": "Wait to Find Path",
              "id": "ec4b20ec-9ef8-49d6-a3c9-38ffbcd26728",
              "type": "sequence",
              "subtrees": [
                {
                  "name": "Ask for Path",
                  "id": "05d38b85-d666-4c97-823b-24ee816487e0",
                  "type": "scriptAction",
                  "decorators": [
                    {
                      "id": "8e5989ee-b572-4952-ba89-525e6bd904e0",
                      "type": "waitUntil",
                      "name": "Wait Until Destination Given",
                      "condition": [
                        "return arg.orderData.destination ~= nil"
                      ]
                    }
                  ],
                  "script": [
                    "if loc.foundLeader then",
                    "    loc.pathQuery = FindPath(loc.foundLeader:GetPosition(), arg.orderData.destination)",
                    "else",
                    "    loc.pathQuery = FindPath(self:GetLeaderGroup():GetLeader():GetPosition(), arg.orderData.destination)",
                    "end"
                  ]
                },
                {
                  "name": "Save Found Path",
                  "id": "edd0e148-4e55-4a90-ac71-e34fd856549d",
                  "type": "scriptAction",
                  "decorators": [
                    {
                      "id": "d6ffec0e-d8f4-4b8f-a971-c09465c9bab8",
                      "type": "waitUntil",
                      "name": "Wait Until Path Ready",
                      "condition": [
                        "return loc.pathQuery:IsReady()"
                      ]
                    }
                  ],
                  "script": [
                    "loc.path = loc.pathQuery:Value()",
                    "loc.pathQuery = nil",
                    "",
                    "loc.dataValidTable[\"path\"] = true",
                    "DebugLog(\"Path Set Up\")"
                  ]
                }
              ],
              "decorators": [
                {
                  "id": "33a66493-2ed0-4a71-a0bd-b552c974819a",
                  "type": "scriptCondition",
                  "name": "No Path",
                  "script": [
                    "return loc.dataValidTable[\"path\"] ==false"
                  ]
                }
              ]
            },
            {
              "name": "If control points data",
              "id": "c674bd69-f639-4440-953f-d8b03a77b0bc",
              "type": "selector",
              "subtrees": [
                {
                  "name": "Set Up PathPoints",
                  "id": "1221f95b-0654-4b1c-9f4a-b8f4c7f2e69c",
                  "type": "scriptAction",
                  "decorators": [
                    {
                      "id": "a8f3e9e1-a3ab-474d-8c30-f06f23af70d3",
                      "type": "scriptCondition",
                      "name": "if path exists and NO control points",
                      "script": [
                        "if loc.path ~= nil and loc.dataValidTable[\"path\"] == true and loc.dataValidTable[\"controlPoints\"] == false then",
                        "    return true",
                        "end",
                        "return false"
                      ]
                    }
                  ],
                  "script": [
                    "loc.controlPoints = {}",
                    "",
                    "local pathLen = loc.path:Length()",
                    "local segmentCount = math.floor(pathLen / loc.controlPointDistance)",
                    "",
                    "if segmentCount < 1 then ",
                    "    loc.controlPoints[1] = arg.orderData.destination",
                    "    loc.dataValidTable[\"controlPoints\"] = true",
                    "    DebugLog(\"Path Points Set Up\")",
                    "    return",
                    "end",
                    "",
                    "for iSeg=1,segmentCount do",
                    "    local newPoint = loc.path:PositionAlongPath(loc.controlPointDistance*iSeg)",
                    "    loc.controlPoints[iSeg] = newPoint",
                    "end",
                    "",
                    "if loc.controlPoints[segmentCount]:Distance(arg.orderData.destination) > loc.controlPointDistance/2 then",
                    "   loc.controlPoints[segmentCount+1] = arg.orderData.destination",
                    "else",
                    "   loc.controlPoints[segmentCount] = arg.orderData.destination",
                    "end",
                    "",
                    "loc.dataValidTable[\"controlPoints\"] = true",
                    "DebugLog(\"Path Points Set Up\")"
                  ]
                },
                {
                  "name": "If orders and index data",
                  "id": "f40efbab-f390-41bb-9dfa-5c52feb8d0eb",
                  "type": "selector",
                  "subtrees": [
                    {
                      "name": "Set Up Orders",
                      "id": "82764376-d9fb-48ce-ad66-f93568d2df2a",
                      "type": "scriptAction",
                      "decorators": [
                        {
                          "id": "58c54b6f-3398-4949-be09-69b8122c79f9",
                          "type": "scriptCondition",
                          "name": "no order data",
                          "script": [
                            "return loc.dataValidTable[\"orders\"] == false"
                          ]
                        }
                      ],
                      "script": [
                        "-- Initialize variables",
                        "local teamIndex = 1 -- To iterate over aliveFireTeams cyclically",
                        "local orderIndex = 1 -- To keep track of the index in preparedOrders",
                        "loc.preparedOrders = {}",
                        "",
                        "DebugLog(\"Alive fire teams detected: \"..#loc.aliveFireTeams)",
                        "",
                        "-- Iterate over all controlPoints",
                        "for _, controlPoint in ipairs(loc.controlPoints) do",
                        "    -- Prepare an order for the current controlPoint",
                        "    local preparedOrder = {}",
                        "",
                        "    -- Set up subOrderData for the Advance order",
                        "    preparedOrder[\"subOrderData\"] = {",
                        "        orderName = \"Advance\",",
                        "        destination = controlPoint",
                        "    }",
                        "",
                        "    -- Assign the current fire team to the order",
                        "    local currentTeam = loc.aliveFireTeams[teamIndex]",
                        "    preparedOrder[\"subordinates\"] = {currentTeam}",
                        "",
                        "    -- Set subordinateData to an empty table",
                        "    preparedOrder[\"subordinateData\"] = {}",
                        "",
                        "    -- Store the prepared order into loc.preparedOrders",
                        "    loc.preparedOrders[orderIndex] = preparedOrder",
                        "    orderIndex = orderIndex + 1",
                        "",
                        "    -- Move to the next team in a cyclic manner",
                        "    teamIndex = teamIndex + 1",
                        "    if teamIndex > #loc.aliveFireTeams then",
                        "        teamIndex = 1 -- Loop back to the first team",
                        "    end",
                        "end",
                        "",
                        "-- send an order to the following teams to reach the end",
                        "local finalControlPoint = loc.controlPoints[#loc.controlPoints]",
                        "for i = 1, #loc.aliveFireTeams - 1 do",
                        "    local preparedOrder = {}",
                        "    -- Set up subOrderData for the Advance order",
                        "    preparedOrder[\"subOrderData\"] = {",
                        "        orderName = \"Advance\",",
                        "        destination = finalControlPoint",
                        "    }",
                        "    -- Assign the current fire team to the order",
                        "    local currentTeam = loc.aliveFireTeams[teamIndex]",
                        "    preparedOrder[\"subordinates\"] = {currentTeam}",
                        "    -- Set subordinateData to an empty table",
                        "    preparedOrder[\"subordinateData\"] = {}",
                        "",
                        "    -- Store the prepared order into loc.preparedOrders",
                        "    loc.preparedOrders[orderIndex] = preparedOrder",
                        "    orderIndex = orderIndex + 1",
                        "",
                        "    teamIndex = teamIndex + 1",
                        "    if teamIndex > #loc.aliveFireTeams then",
                        "        teamIndex = 1 -- Loop back to the first team",
                        "    end",
                        "end",
                        "",
                        "-- Set loc.orderToPerformIndex to 1",
                        "loc.orderToPerformIndex = 1",
                        "",
                        "-- Set loc.maxOrderIndex to the total number of prepared orders",
                        "loc.maxOrderIndex = orderIndex - 1",
                        "",
                        "-- Debug print for verification (remove in production)",
                        "for i, order in ipairs(loc.preparedOrders) do",
                        "    DebugLog(\"Order \" .. i .. \":\")",
                        "    DebugLog(\"  Order Name: \" .. order.subOrderData.orderName)",
                        "    DebugLog(\"  Destination: \" .. order.subOrderData.destination)",
                        "    DebugLog(\"  Subordinates: \" .. table.concat(order.subordinates, \", \"))",
                        "end",
                        "",
                        "-- Print final settings",
                        "DebugLog(\"orderToPerformIndex: \" .. loc.orderToPerformIndex)",
                        "DebugLog(\"maxOrderIndex: \" .. loc.maxOrderIndex)",
                        "",
                        "",
                        "-- set validity to true",
                        "loc.dataValidTable[\"orders\"] = true",
                        "DebugLog(\"Orders Set Up\")",
                        "",
                        "",
                        "-- OLD STRUCTURE INSTRUCTIONS",
                        "-- you have a table loc.aliveFireTeams ",
                        "-- your goal is to iterate over them, so that the first order has a subordinate sent to team at index 1",
                        "-- second at index 2",
                        "-- etc.",
                        "-- once no more teams are avalable, assign to team 1 again",
                        "",
                        "-- how to assign orders:",
                        "-- go over table loc.controlPoints",
                        "-- for each point create an Advance order that has destination set to the control point and a subordinate set accordingly",
                        "-- set the subordinateData to empty as in the example",
                        "",
                        "-- then store the order into the table loc.preparedOrders",
                        "-- so first preparedOrder is at loc.preparedOrders[1] etc.",
                        "",
                        "-- also set loc.orderToPerformIndex to 1",
                        "-- set loc.maxOrderIndex accordingly"
                      ]
                    }
                  ],
                  "active": true
                }
              ],
              "active": true
            }
          ],
          "active": true
        }
      ],
      "meta": {
        "nodesInfo": [
          {
            "id": "a28e6cd2-d483-4de1-8da9-03fc13c93efd",
            "position": "5547.86283074266,973.376140490805"
          },
          {
            "id": "d5a8f45f-82fc-4090-a05b-4a873ee45920",
            "position": "5410.36283074266,1073.3761404908"
          },
          {
            "id": "250000ce-93b0-4b68-93db-84459a7db542",
            "position": "5685.36283074266,1035.8761404908"
          },
          {
            "id": "ec4b20ec-9ef8-49d6-a3c9-38ffbcd26728",
            "position": "5460.36283074265,1248.37614049081"
          },
          {
            "id": "05d38b85-d666-4c97-823b-24ee816487e0",
            "position": "5222.86283074266,1410.8761404908"
          },
          {
            "id": "edd0e148-4e55-4a90-ac71-e34fd856549d",
            "position": "5510.36283074266,1410.8761404908"
          },
          {
            "id": "c674bd69-f639-4440-953f-d8b03a77b0bc",
            "position": "5835.36283074266,1098.3761404908"
          },
          {
            "id": "1221f95b-0654-4b1c-9f4a-b8f4c7f2e69c",
            "position": "5760.36283074266,1235.87614049081"
          },
          {
            "id": "f40efbab-f390-41bb-9dfa-5c52feb8d0eb",
            "position": "6010.36283074266,1160.8761404908"
          },
          {
            "id": "82764376-d9fb-48ce-ad66-f93568d2df2a",
            "position": "6110.36283074266,1273.3761404908"
          }
        ],
        "editorObjects": []
      },
      "active": true
    },
    {
      "name": "someone is alive?",
      "id": "da94f6e9-1953-46a7-a8a6-d92420ad40c9",
      "type": "selector",
      "subtrees": [
        {
          "name": "Wait Forever",
          "id": "a081bed9-7910-4ddf-8f90-9242015b130d",
          "type": "waitForever",
          "decorators": [
            {
              "id": "1e3c8cd0-ff0f-45d5-af34-081c99c4d0d4",
              "type": "scriptCondition",
              "name": "?found leader?",
              "script": [
                "-- If we already have a valid leader group, no need to recheck",
                "if loc.foundLeader ~= nil and loc.foundLeaderGroup ~= nil then",
                "    -- If loc.foundLeaderGroup has 2+ alive soldiers, return true",
                "    local aliveCount = 0",
                "    for s = 1, loc.foundLeaderGroup:GetEntityCount() do",
                "        local soldier = loc.foundLeaderGroup:GetEntity(s - 1)",
                "        if soldier and soldier:IsAlive() then",
                "            aliveCount = aliveCount + 1",
                "        end",
                "    end",
                "    if aliveCount >= 2 then",
                "        return true",
                "    end",
                "",
                "    -- Otherwise, invalidate loc.dataValidTable and look for a new leader",
                "    loc.dataValidTable = nil",
                "end",
                "",
                "",
                "-- Find the closest viable leader using deterministic logic",
                "loc.foundLeader = nil",
                "loc.foundLeaderGroup = nil",
                "local closestLeaderPosition = nil",
                "local minDistance = math.huge",
                "local targetDestination = arg.orderData.destination",
                "",
                "if targetDestination == nil then",
                "    DebugLog(\"ERROR: arg.orderData.destination is NIL\")",
                "    return false",
                "end",
                "",
                "-- Iterate over fire teams to find a valid leader",
                "local fireTeamCount = self:GetChildGroupCount()",
                "for i = 1, fireTeamCount do    ",
                "    local iGroup = self:GetChildGroup(i - 1)",
                "    local aliveCount = 0",
                "    local leaderCandidate = nil",
                "",
                "    local soliderCount = iGroup:GetEntityCount()",
                "",
                "    -- Count alive soldiers in the group",
                "    for s = 1, soliderCount do",
                "        local soldier = iGroup:GetEntity(s - 1)",
                "        if soldier and soldier:IsAlive() then",
                "            aliveCount = aliveCount + 1",
                "        end",
                "    end",
                "",
                "    -- Only consider groups with 2 or more alive soldiers",
                "    if aliveCount >= 2 then",
                "        -- Try to get the group leader first",
                "        leaderCandidate = iGroup:GetLeader()",
                "        ",
                "        if leaderCandidate and leaderCandidate:IsAlive() then",
                "            -- If leader is alive, calculate the distance to the target destination",
                "            local leaderPos = leaderCandidate:GetPosition()",
                "            local distance = targetDestination:Distance(leaderPos)",
                "",
                "            if distance < minDistance then",
                "                -- Update closest leader and group if this one is closer",
                "                minDistance = distance",
                "                loc.foundLeader = leaderCandidate",
                "                loc.foundLeaderGroup = iGroup",
                "                closestLeaderPosition = leaderPos",
                "            end",
                "",
                "        -- if leader candidate is nil or dead",
                "        else ",
                "            -- If the leader is dead, find another alive soldier",
                "            for s = 1, soliderCount do",
                "                leaderCandidate = iGroup:GetEntity(s - 1)",
                "                if leaderCandidate and leaderCandidate:IsAlive() then",
                "                    -- Calculate the distance to the target destination",
                "                    local leaderPos = leaderCandidate:GetPosition()",
                "                    local distance = targetDestination:Distance(leaderPos)",
                "",
                "                    if distance < minDistance then",
                "                        -- Update closest leader and group if this one is closer",
                "                        minDistance = distance",
                "                        loc.foundLeader = leaderCandidate",
                "                        loc.foundLeaderGroup = iGroup",
                "                        closestLeaderPosition = leaderPos",
                "                    end",
                "                    break -- Stop once we find an alive soldier to serve as the leader",
                "                end",
                "            end",
                "        end",
                "    end",
                "end",
                "",
                "-- If no valid leader found, return false",
                "if loc.foundLeader == nil then",
                "    DebugLog(\"No leader found\")",
                "    return false",
                "end",
                "",
                "-- Successfully found a leader, return true",
                "return true"
              ]
            }
          ]
        },
        {
          "name": "Wait Forever",
          "id": "810126b8-5433-4097-b25f-cd12318f62fc",
          "type": "waitForever"
        }
      ],
      "meta": {
        "nodesInfo": [
          {
            "id": "da94f6e9-1953-46a7-a8a6-d92420ad40c9",
            "position": "1947.86283074266,1048.3761404908"
          },
          {
            "id": "a081bed9-7910-4ddf-8f90-9242015b130d",
            "position": "1735.36283074265,1173.3761404908"
          },
          {
            "id": "810126b8-5433-4097-b25f-cd12318f62fc",
            "position": "1935.36283074265,1185.8761404908"
          }
        ],
        "editorObjects": []
      },
      "active": true
    },
    {
      "name": "Check For Completion",
      "id": "3ee10945-4671-4ff6-aad4-a6e652b06161",
      "type": "scriptAction",
      "meta": {
        "nodesInfo": [
          {
            "id": "3ee10945-4671-4ff6-aad4-a6e652b06161",
            "position": "5247.86283074266,998.376140490805"
          }
        ],
        "editorObjects": []
      },
      "script": [
        "if loc.orderToPerformIndex > loc.maxOrderIndex and loc.foundLeader ~= nil then",
        "    DebugLog(\"All \"..loc.maxOrderIndex..\" orders completed. Sucessing the tree.\")",
        "    loc.orderCompleted = true",
        "end"
      ]
    },
    {
      "name": "first all meet up with the leader",
      "id": "2e927807-bf0b-4b06-826b-f001f5933262",
      "type": "sequence",
      "subtrees": [
        {
          "name": "prepare order data",
          "id": "840a3ebc-c74b-4551-863e-97fba1ac13c0",
          "type": "scriptAction",
          "script": [
            "if loc.foundLeader == nil then",
            "    DebugLog(\"UNEXPECTEDLY LEADER IS NIL WHEN I WANT TO GROUP EVERYONE\")",
            "    return",
            "end",
            "",
            "-- Get order destination",
            "local targetDestination = arg.orderData.destination",
            "if targetDestination == nil then",
            "    DebugLog(\"ERROR: arg.orderData.destination is NIL\")",
            "    return",
            "end",
            "",
            "-- Find the closest alive leader to the targetDestination",
            "local closestLeaderPosition = nil",
            "local chosenGroup = nil",
            "local minDistance = math.huge",
            "",
            "--[[",
            "for _, team in ipairs(loc.aliveFireTeams) do",
            "    local teamLeader = team:GetLeader()",
            "    if teamLeader and teamLeader:IsAlive() then",
            "        local leaderPos = teamLeader:GetPosition()",
            "        local distance = targetDestination:Distance(leaderPos)",
            "",
            "        if distance < minDistance then",
            "            minDistance = distance",
            "            closestLeaderPosition = leaderPos",
            "            chosenGroup = team",
            "        end",
            "    end",
            "end",
            "--]]",
            "",
            "-- If no valid leader found, fall back to foundLeader's position",
            "if closestLeaderPosition == nil then",
            "    DebugLog(\"WARNING: No valid leader found in aliveFireTeams, using loc.foundLeader position\")",
            "    closestLeaderPosition = loc.foundLeader:GetPosition()",
            "    chosenGroup = loc.foundLeaderGroup",
            "end",
            "",
            "-- Initialize order storage for Advance orders",
            "loc.subOrderData = { orderName = \"Advance\", destination = closestLeaderPosition }",
            "loc.subordinates = {}",
            "loc.subordinateData = InternalTable()",
            "",
            "-- Function to process teams and assign orders",
            "local function addTeamToAdvanceOrder(team)",
            "    if team ~= chosenGroup then",
            "        local subordinate = standard_behaviors.GetVehicleOrSelf(team)",
            "        table.insert(loc.subordinates, subordinate)",
            "        loc.subordinateData[subordinate] = {",
            "            destination = closestLeaderPosition",
            "        }",
            "    else",
            "        local subordinate = standard_behaviors.GetVehicleOrSelf(team)",
            "        table.insert(loc.subordinates, subordinate)",
            "        -- Add a small vector towards the targetDestination (as per the TODO)",
            "        local directionToTarget = (targetDestination - closestLeaderPosition):Normalized()  -- Vector pointing towards target",
            "        local offsetVector = directionToTarget + directionToTarget  -- Small offset towards the target",
            "        loc.subordinateData[subordinate] = {",
            "            destination = closestLeaderPosition + offsetVector",
            "        }      ",
            "    end    ",
            "end",
            "",
            "-- Assign Advance orders to all alive fire teams except the leader's team",
            "for _, team in ipairs(loc.aliveFireTeams) do",
            "    addTeamToAdvanceOrder(team)",
            "end",
            "",
            "-- Assign Advance orders to all single-man teams except the leader's team",
            "for _, team in ipairs(loc.singleManTeams) do",
            "    addTeamToAdvanceOrder(team)",
            "end",
            "",
            "-- Debug Logs",
            "DebugLog(\"Setting all \" .. #loc.subordinates .. \" teams to advance to the closest leader's position.\")",
            "DebugLog(\"Chosen leader position: \" .. tostring(closestLeaderPosition))"
          ]
        },
        {
          "name": "Gather around leader",
          "id": "c7a09ba8-1836-44cd-b95b-ea08b1e31772",
          "type": "reference",
          "target": [
            "standard_behaviors",
            "ExecuteSubordinateOrder"
          ],
          "arguments": {
            "orderData": "return loc.subOrderData",
            "subordinates": "return loc.subordinates",
            "subordinateData": "return loc.subordinateData",
            "update": "return false"
          }
        },
        {
          "name": "report grouping finished",
          "id": "9ac85a70-b15c-467e-a027-4800064216b4",
          "type": "scriptAction",
          "script": [
            "loc.dataValidTable[\"gathered\"] = true",
            "DebugLog(\"Everyone grouped with the leader\")"
          ]
        }
      ],
      "decorators": [
        {
          "id": "467140cf-5b0c-4043-a7f9-e58dcb3ea9e6",
          "type": "scriptCondition",
          "name": "If is leader and not gathered",
          "script": [
            "return loc.foundLeader ~= nil and loc.dataValidTable[\"gathered\"] == false"
          ]
        }
      ],
      "meta": {
        "nodesInfo": [
          {
            "id": "2e927807-bf0b-4b06-826b-f001f5933262",
            "position": "4847.86283074266,898.376140490805"
          },
          {
            "id": "840a3ebc-c74b-4551-863e-97fba1ac13c0",
            "position": "4517.15941526214,1139.43181818182"
          },
          {
            "id": "c7a09ba8-1836-44cd-b95b-ea08b1e31772",
            "position": "4747.86283074266,1123.3761404908"
          },
          {
            "id": "9ac85a70-b15c-467e-a027-4800064216b4",
            "position": "5122.86283074266,1123.3761404908"
          }
        ],
        "editorObjects": []
      }
    }
  ],
  "meta": {
    "nodesInfo": [
      {
        "id": "2f63bc08-de32-4fdb-bd76-ff5f64026b56",
        "position": "2897.86283074267,860.876140490805"
      },
      {
        "id": "7ead6ce7-aff1-4bc3-8f4f-bf746d5124f7",
        "position": "2372.86283074266,1173.3761404908"
      },
      {
        "id": "a10e69f8-93da-484e-8f1d-12346a715f9b",
        "position": "2147.86283074266,1360.8761404908"
      },
      {
        "id": "55f63cbc-df00-4df6-aa95-51060e45bf51",
        "position": "1722.86283074266,1510.8761404908"
      },
      {
        "id": "fbe9c14e-5e2c-4799-9dbb-877916789599",
        "position": "1310.36283074266,1635.8761404908"
      },
      {
        "id": "be611d03-218d-462f-9034-92e4dceab48d",
        "position": "1472.86283074266,1685.8761404908"
      },
      {
        "id": "6615f19c-0b2d-4999-8535-4330c0ae05f9",
        "position": "1647.86283074266,1735.8761404908"
      },
      {
        "id": "62bc8a82-9e77-4d25-845b-e8831846d782",
        "position": "1460.36283074266,1835.8761404908"
      },
      {
        "id": "78a3672b-ffea-4934-b910-30d7679b0e04",
        "position": "1747.86283074266,1835.8761404908"
      },
      {
        "id": "2e806ddd-9d6a-4182-89b7-316eb491aab3",
        "position": "1847.86283074266,1735.8761404908"
      },
      {
        "id": "04c0cc53-4f97-4860-8b08-11c2f9206bb5",
        "position": "2022.86283074266,1723.3761404908"
      },
      {
        "id": "7a1d3809-0fa4-4ca7-82a4-467442240510",
        "position": "2210.36283074266,1685.8761404908"
      },
      {
        "id": "1f352893-81d8-4254-96d5-8c035946b084",
        "position": "2372.86283074266,1635.8761404908"
      },
      {
        "id": "41b0a54a-8940-4a8b-b760-0f7c41bdc74c",
        "position": "3035.36283074266,1548.3761404908"
      },
      {
        "id": "20870fcb-6112-48c4-b0dc-f9e7c1e082f6",
        "position": "2822.86283074266,1685.8761404908"
      },
      {
        "id": "2e3ca50d-1c9c-405e-b759-6c0aa07c5591",
        "position": "2522.86283074266,1835.8761404908"
      },
      {
        "id": "3c066406-8d2a-4695-a4f2-951f98044120",
        "position": "2772.86283074266,1860.8761404908"
      },
      {
        "id": "1c1d329e-2a84-43c2-85f7-98e31cb615de",
        "position": "3260.36283074266,1810.8761404908"
      },
      {
        "id": "9d614210-49b0-4e08-868b-932c73ebc005",
        "position": "3172.86283074266,1885.8761404908"
      },
      {
        "id": "0bcd0da4-4e2c-404a-94f5-b5be44d2c36f",
        "position": "3360.36283074266,1885.8761404908"
      },
      {
        "id": "272cbfe9-3da4-4bb5-83b4-9c06f0eca175",
        "position": "3885.36283074266,1698.3761404908"
      },
      {
        "id": "06f2ae26-045e-4703-858a-148627cd28e7",
        "position": "3760.36283074266,1848.3761404908"
      },
      {
        "id": "0cfe8aec-4d9f-4045-9eda-c3f24c39d079",
        "position": "3572.86283074266,1960.8761404908"
      },
      {
        "id": "89cbc79c-f003-400b-9827-9b1d8dc63d72",
        "position": "3297.86283074266,2198.3761404908"
      },
      {
        "id": "95a0a875-918d-4777-ae98-2e1c6edf09ea",
        "position": "3472.86283074266,2198.3761404908"
      },
      {
        "id": "ab815002-566d-4eec-b3fe-0c7bae85fe1c",
        "position": "3885.36283074266,2210.8761404908"
      },
      {
        "id": "df913449-618a-43a3-8564-579dc38dd892",
        "position": "3922.86283074266,1948.3761404908"
      },
      {
        "id": "e8283e40-0307-49d6-96e4-d2967f1397e2",
        "position": "3835.36283074266,2023.3761404908"
      },
      {
        "id": "cbb3ca93-43b2-49da-a36f-a67a46e88d62",
        "position": "4022.86283074266,2023.3761404908"
      },
      {
        "id": "b6a7f2d1-64ca-4a05-b2da-41e48f93c769",
        "position": "4347.86283074267,1848.3761404908"
      },
      {
        "id": "342b581c-c830-4ed3-bd8d-48d180bd9cad",
        "position": "4210.36283074267,1998.3761404908"
      },
      {
        "id": "a97fbea3-02f9-4ac0-af33-d87f77e0ade8",
        "position": "4497.86283074267,1998.3761404908"
      },
      {
        "id": "8fbafd5d-20a4-45d5-98b3-a722a56fb701",
        "position": "2535.36283074266,1285.8761404908"
      },
      {
        "id": "03c5dd2b-569d-4183-acf4-7e49d0d15f70",
        "position": "2447.86283074266,1360.8761404908"
      },
      {
        "id": "91f75bf4-774f-49a8-a256-aa9f16e2bc6c",
        "position": "2630.89232815199,1362.49915636383"
      },
      {
        "id": "7bb0d5c4-3cd5-49ae-b6df-9abbd50b2cd3",
        "position": "2985.36283074266,1160.8761404908"
      },
      {
        "id": "4419ca60-93fc-4049-b895-99a83ba977d9",
        "position": "2872.86283074266,1285.8761404908"
      },
      {
        "id": "79f475a1-2d9f-4a8d-931b-c9157f927e4c",
        "position": "3110.36283074266,1285.8761404908"
      },
      {
        "id": "ceafd781-ca4d-4c33-9092-ceea2a693ac7",
        "position": "3347.86283074266,1198.3761404908"
      },
      {
        "id": "2bbe1616-6ec0-491c-8f93-a4a766793b68",
        "position": "3560.36283074266,1198.3761404908"
      }
    ],
    "editorObjects": [],
    "canvasSize": "6964.12805192362,3697.93162562821",
    "gridPadding": "10.3628307426606,10.8761404908048"
  },
  "parameters": [
    {
      "name": "orderData",
      "isOptional": false,
      "defaultValue": "",
      "evaluation": "passByReference"
    }
  ],
  "locals": {
    "controlPointDistance": "return 60",
    "allDataValid": "return false",
    "foundLeader": "return nil",
    "foundLeaderGroup": "return nil",
    "pathQuery": "return nil",
    "path": "return nil",
    "aliveFireTeams": "return nil",
    "singleManTeams": "return {}",
    "controlPoints": "return nil",
    "preparedOrders": "return nil",
    "orderToPerformIndex": "return nil",
    "maxOrderIndex": "return nil",
    "orderCompleted": "return false",
    "subOrderData": "return nil",
    "subordinates": "return nil",
    "subordinateData": "return nil",
    "subOrderDataFollow": "return nil",
    "subordinatesFollow": "return nil",
    "subordinateDataFollow": "return nil"
  }
}