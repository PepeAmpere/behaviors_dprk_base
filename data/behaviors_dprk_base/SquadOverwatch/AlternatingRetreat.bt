{
  "name": "Alternative Retreat Tree Root",
  "id": "9d340382-1648-4323-be7d-a539be304d1f",
  "type": "supervisedParallel",
  "subtrees": [
    {
      "name": "What now?",
      "id": "44e4d089-f76e-4d89-9827-9de06cc8ef52",
      "type": "selector",
      "subtrees": [
        {
          "name": "<unnamed>",
          "id": "1cfca328-2f4d-4497-ad95-8ef0e9883f9e",
          "type": "sequence",
          "subtrees": [
            {
              "name": "prepare order data",
              "id": "8006d54d-880c-4041-8126-d5f0478a3fb1",
              "type": "scriptAction",
              "script": [
                "loc.subOrderData = {orderName = \"Idle\"}",
                "loc.subordinates = {}",
                "loc.subordinateData = InternalTable()",
                "for child in self:GetChildGroups() do",
                "    local subordinate = standard_behaviors.GetVehicleOrSelf(child)",
                "    table.insert(loc.subordinates, subordinate)    ",
                "    loc.subordinateData[subordinate] = {}",
                "end"
              ]
            },
            {
              "name": "<unnamed>",
              "id": "d5354e96-92b1-4700-8b94-5f039102d977",
              "type": "parallel",
              "subtrees": [
                {
                  "name": "Set all soldiers idle",
                  "id": "6dcfe5f9-7e35-4848-94b2-3fb02b7e8641",
                  "type": "reference",
                  "target": [
                    "standard_behaviors",
                    "ExecuteSubordinateOrder"
                  ],
                  "arguments": {
                    "orderData": "return loc.subOrderData",
                    "subordinates": "return loc.subordinates",
                    "subordinateData": "return loc.subordinateData",
                    "update": "return false"
                  }
                },
                {
                  "name": "<unnamed>",
                  "id": "2f4472eb-a8d7-46b3-8f48-394a5dd076a5",
                  "type": "sequence",
                  "subtrees": [
                    {
                      "name": "Wait 2s ",
                      "id": "a64e55ad-e696-4b44-a280-74ccb791e031",
                      "type": "wait",
                      "time": [
                        "return 2"
                      ]
                    },
                    {
                      "name": "Idle set",
                      "id": "38d78ac3-e597-41db-8f41-5574f70bcabc",
                      "type": "scriptAction",
                      "script": [
                        "loc.idleSet = true"
                      ]
                    },
                    {
                      "name": "Wait Forever",
                      "id": "93e9c3bb-1177-420f-8991-c6d4f15a9cf7",
                      "type": "waitForever"
                    }
                  ]
                }
              ],
              "waitForAll": false
            }
          ],
          "decorators": [
            {
              "id": "ece59539-0061-4b6d-8084-f95e39586979",
              "type": "scriptCondition",
              "name": "Idle behaviour set to all?",
              "script": [
                "return loc.idleSet == false"
              ]
            }
          ]
        },
        {
          "name": "Wait till last squad is settled and succeed tree",
          "id": "22caf228-ca67-4065-af70-79ca73fc7a8b",
          "type": "sequence",
          "subtrees": [
            {
              "name": "wait 7s until firesquad takes cover",
              "id": "38f9ded0-9e3d-4de3-990a-2e7827c4c185",
              "type": "wait",
              "time": [
                "return 7"
              ]
            },
            {
              "name": "Succeed",
              "id": "4b945e70-c600-472d-88a8-b94f3d170999",
              "type": "success"
            }
          ],
          "decorators": [
            {
              "id": "64f7690d-ffde-4122-9729-186938f2a93f",
              "type": "scriptCondition",
              "name": "FireSquad at target location?",
              "script": [
                "local fireTeamsCount = self:GetChildGroupCount()",
                "for i=0,fireTeamsCount-1 do",
                "    local fireTeam = self:GetChildGroup(i)",
                "    local soldiersCount = fireTeam:GetEntityCount()",
                "    for s=0, soldiersCount-1 do",
                "        local soldier = fireTeam:GetEntity(s)",
                "        if soldier:IsAlive() then",
                "            if soldier:GetPosition():Distance(arg.orderData.destination) > 40 then",
                "                return false ",
                "            end",
                "        end",
                "    end",
                "end",
                "",
                "if loc.runningFireTeam ~= nil then",
                "    return false",
                "end",
                "",
                "--maybe add check if they are all heading the right direction or all have stance prone?",
                "",
                "return true"
              ]
            }
          ]
        },
        {
          "name": "prepare and send all to the destination",
          "id": "86c0492d-0f87-4567-9794-94f9b2c2dff9",
          "type": "sequence",
          "subtrees": [
            {
              "name": "prepare order data",
              "id": "00cbb27a-d5b0-42cf-a43e-93b1efe50e6d",
              "type": "scriptAction",
              "script": [
                "local position = arg.orderData.destination",
                "",
                "loc.subOrderData = {orderName = \"Advance\", destination = position}",
                "loc.subordinates = {}",
                "loc.subordinateData = InternalTable()",
                "for child in self:GetChildGroups() do",
                "    local subordinate = standard_behaviors.GetVehicleOrSelf(child)",
                "    table.insert(loc.subordinates, subordinate)    ",
                "    loc.subordinateData[subordinate] = {",
                "        destination = position",
                "    }",
                "end"
              ]
            },
            {
              "name": "Clear area for all subordinates",
              "id": "66d50744-b76f-49ae-955e-3dda10f36824",
              "type": "reference",
              "target": [
                "standard_behaviors",
                "ExecuteSubordinateOrder"
              ],
              "arguments": {
                "orderData": "return loc.subOrderData",
                "subordinates": "return loc.subordinates",
                "subordinateData": "return loc.subordinateData",
                "update": "return false"
              }
            },
            {
              "name": "Succeed",
              "id": "5f1f46f3-964d-4c5c-9566-64bf826cc063",
              "type": "success"
            }
          ],
          "decorators": [
            {
              "id": "696a2652-7f03-4949-8ff6-e615835e55b6",
              "type": "scriptCondition",
              "name": "no leader available",
              "script": [
                "return loc.noLeaderAvailable == true"
              ]
            }
          ]
        },
        {
          "name": "<unnamed>",
          "id": "ff00253f-4f06-4e67-ab40-9f60eb56c458",
          "type": "sequence",
          "subtrees": [
            {
              "name": "clear data",
              "id": "36361d03-9339-4676-8ecd-7c694905a661",
              "type": "scriptAction",
              "script": [
                "loc.paths = {}",
                "loc.runningFireTeam = nil"
              ]
            },
            {
              "name": "Ask for paths",
              "id": "86b69024-8272-48e5-8cee-aabdb11adc0e",
              "type": "scriptAction",
              "decorators": [
                {
                  "id": "93c9dd60-c053-40ab-b5a6-fa89e841b527",
                  "type": "waitUntil",
                  "name": "Wait Until Path Ready",
                  "condition": [
                    "local position = arg.orderData.destination",
                    "",
                    "if position == nil then",
                    "    return false",
                    "end",
                    "if #loc.paths == 0 then",
                    "    --return true",
                    "end",
                    "--return false",
                    "return true"
                  ]
                }
              ],
              "script": [
                "local position = arg.orderData.destination",
                "",
                "local fireTeamsCount = self:GetChildGroupCount()",
                "loc.fireTeamLeaders = {}",
                "loc.fireTeams = {}",
                "for i = 1, fireTeamsCount do",
                "    local fireTeam = self:GetChildGroup(i-1)",
                "    local aliveSoldiersCount = 0",
                "    local soldiersCount = fireTeam:GetEntityCount()",
                "    for s=1, soldiersCount do",
                "        local soldier = fireTeam:GetEntity(s-1)",
                "        if soldier:IsAlive() then -- and fireTeamLeaders[i] == nil or not fireTeamLeaders[i]:IsAlive() then",
                "            aliveSoldiersCount = aliveSoldiersCount + 1",
                "            if aliveSoldiersCount > 1 then",
                "                loc.fireTeamLeaders[#loc.fireTeamLeaders+1] = soldier",
                "                break",
                "            end",
                "        end",
                "    end",
                "    if aliveSoldiersCount > 1 then",
                "        loc.fireTeams[#loc.fireTeams+1] = fireTeam",
                "    end",
                "end",
                "if #loc.fireTeams == 1 then",
                "    loc.noLeaderAvailable = true",
                "end",
                "loc.pathQueries = {}",
                "for i = 1, #loc.fireTeamLeaders do",
                "    loc.pathQueries[i] = FindPath(loc.fireTeamLeaders[i]:GetPosition(),position)",
                "end",
                "--DebugLog(\" #loc.fireTeamLeaders: \" ..tostring(#loc.fireTeamLeaders))",
                "--DebugLog(\" #loc.pathQueries: \" ..tostring(#loc.pathQueries))"
              ]
            },
            {
              "name": "Fetch paths",
              "id": "3e2d2b75-c507-4460-a714-7fd76c14b505",
              "type": "scriptAction",
              "decorators": [
                {
                  "id": "7ccdf261-5606-4ad6-84d2-be714088b2ef",
                  "type": "waitUntil",
                  "name": "Wait Until Paths Ready",
                  "condition": [
                    "for i = 1, #loc.pathQueries do",
                    "    if not loc.pathQueries[i]:IsReady() then",
                    "        return false",
                    "    end",
                    "end",
                    "",
                    "return true"
                  ]
                }
              ],
              "script": [
                "for i = 1, #loc.pathQueries do",
                "    loc.paths[i] = loc.pathQueries[i]:Value()",
                "end"
              ]
            },
            {
              "name": "Set running team",
              "id": "1c093503-254d-48d9-a59c-f36ac9b81b6c",
              "type": "scriptAction",
              "script": [
                "local longestPathLength = 0",
                "local longestPathTeam = nil",
                "local longestPath = nil",
                "local shortestPathLength = math.huge",
                "local shortestPathTeam = nil",
                "local shortestPath = nil",
                "",
                "",
                "for i=1, #loc.paths do",
                "    local path = loc.paths[i]",
                "    local length = path:Length()",
                "    if length > longestPathLength then",
                "        longestPathLength = length",
                "        longestPathTeam = loc.fireTeams[i]",
                "        longestPath = path",
                "    end",
                "    if length < shortestPathLength then",
                "        shortestPathLength = length",
                "        shortestPathTeam = loc.fireTeams[i]",
                "        shortestPath = path",
                "    end",
                "end",
                "loc.runningFireTeam = longestPathTeam",
                "loc.path = longestPath",
                "loc.waypoints = {}",
                "",
                "local step = 50",
                "local desiredPointDist = longestPathLength - shortestPathLength + step",
                "local waypoint = loc.path:EndPoint()",
                "if desiredPointDist < longestPathLength then",
                "    waypoint = loc.path:PositionAlongPath(desiredPointDist)",
                "end",
                "loc.waypoints[#loc.waypoints + 1] = waypoint"
              ]
            },
            {
              "name": "prepare order data",
              "id": "a49e9721-012c-4a05-94e9-ae0e9f19f43f",
              "type": "scriptAction",
              "script": [
                "local distanceBetweenWaypoints = 50",
                "local rand = math.random(-45,45)",
                "--DebugLog(\"rand: \" ..tostring(rand))",
                "local headingToPrevWaypoint = loc.path:DirectionAlongPath(#loc.waypoints * distanceBetweenWaypoints) - 180 + rand",
                "local position = loc.waypoints[1]",
                "if position:Distance(loc.path:EndPoint()) > 10 then",
                "    headingToPrevWaypoint = loc.path:DirectionAlongPath(#loc.fireTeams * distanceBetweenWaypoints) - 180",
                "end",
                "",
                "loc.subOrderData = {orderName = \"Advance\", destination = position}",
                "loc.subordinates = {}",
                "loc.subordinateData = InternalTable()",
                "local subordinate = standard_behaviors.GetVehicleOrSelf(loc.runningFireTeam)",
                "table.insert(loc.subordinates, subordinate)    ",
                "loc.subordinateData[subordinate] = {",
                "    destination = position,",
                "    heading = headingToPrevWaypoint",
                "}"
              ]
            },
            {
              "name": "prepare follow order data",
              "id": "71b1e0e3-5304-4787-beb0-9dcbf22ec4da",
              "type": "scriptAction",
              "script": [
                "local fireTeamsCount = self:GetChildGroupCount()",
                "local singleFireTeams = {}",
                "for i=0,fireTeamsCount-1 do",
                "    local fireTeam = self:GetChildGroup(i)",
                "    local soldiersCount = fireTeam:GetEntityCount()",
                "    local aliveSoldiersCount = 0",
                "    for s=0, soldiersCount-1 do",
                "            local soldier = fireTeam:GetEntity(s)",
                "            if soldier:IsAlive() then",
                "                aliveSoldiersCount = aliveSoldiersCount + 1",
                "            end",
                "     end",
                "    ",
                "    if aliveSoldiersCount == 1 then",
                "        for s=0, soldiersCount-1 do",
                "            local soldier = fireTeam:GetEntity(s)",
                "            if soldier:IsAlive() then",
                "                singleFireTeams[#singleFireTeams+1] = fireTeam",
                "            end",
                "        end",
                "    end",
                "end",
                "if #singleFireTeams ~= #loc.smallFireTeams or loc.leaderToFollow == nil or not loc.leaderToFollow:IsAlive() then",
                "    loc.smallFireTeams = {}",
                "    loc.leaderToFollow = loc.fireTeamLeader",
                "    for i, team in ipairs(singleFireTeams) do",
                "        loc.smallFireTeams[#loc.smallFireTeams+1] = team",
                "    end",
                "end",
                "",
                "",
                "loc.subOrderDataFollow = {orderName = \"Follow\", followedUnit = loc.leaderToFollow}",
                "loc.subordinatesFollow = {}",
                "loc.subordinateDataFollow = InternalTable()",
                "for i, fireTeam in ipairs(loc.smallFireTeams) do",
                "    local subordinateFollow = standard_behaviors.GetVehicleOrSelf(fireTeam)",
                "    table.insert(loc.subordinatesFollow, subordinateFollow)    ",
                "    loc.subordinateDataFollow[subordinateFollow] = {",
                "        followedUnit = loc.leaderToFollow",
                "    }",
                "end"
              ]
            },
            {
              "name": "<unnamed>",
              "id": "6ef23d72-8214-42b7-ae28-8a53d267264c",
              "type": "parallel",
              "subtrees": [
                {
                  "name": "Anyone still running?",
                  "id": "cf6863f6-9c85-43fa-81f3-8568b8761e6c",
                  "type": "selector",
                  "subtrees": [
                    {
                      "name": "Succeed",
                      "id": "c12cccd7-1392-4bd5-9306-3102f6aedb5a",
                      "type": "success",
                      "decorators": [
                        {
                          "id": "94c51421-a836-4020-afe2-ffb8e45fad71",
                          "type": "scriptCondition",
                          "name": "Everyone in fireteam dead?",
                          "script": [
                            "for i = 1, loc.runningFireTeam:GetEntityCount() do",
                            "    if loc.runningFireTeam:GetEntity(i-1):IsAlive() then",
                            "        return false",
                            "    end",
                            "end",
                            "",
                            "return true"
                          ]
                        }
                      ]
                    },
                    {
                      "name": "Wait Forever",
                      "id": "c3f44006-0f2a-4a79-84bb-46e6e39491cf",
                      "type": "waitForever"
                    }
                  ],
                  "active": true
                },
                {
                  "name": "<unnamed>",
                  "id": "c6bb5ee9-67b3-4a30-968a-49d9ae6564b9",
                  "type": "sequence",
                  "subtrees": [
                    {
                      "name": "Advance to waypoint",
                      "id": "f10380f0-d393-46d2-80b5-0248edec9c8c",
                      "type": "reference",
                      "target": [
                        "standard_behaviors",
                        "ExecuteSubordinateOrder"
                      ],
                      "arguments": {
                        "orderData": "return loc.subOrderData",
                        "subordinates": "return loc.subordinates",
                        "subordinateData": "return loc.subordinateData",
                        "update": "return false"
                      }
                    },
                    {
                      "name": "wait 7s until firesquad takes cover",
                      "id": "ba3ba65b-5414-4fbe-9735-c22289006e93",
                      "type": "wait",
                      "time": [
                        "return 7"
                      ]
                    }
                  ]
                },
                {
                  "name": "Follow leader",
                  "id": "437a60bb-79b2-47ac-a103-2f907df5e547",
                  "type": "reference",
                  "target": [
                    "standard_behaviors",
                    "ExecuteSubordinateOrder"
                  ],
                  "arguments": {
                    "orderData": "return loc.subOrderDataFollow",
                    "subordinates": "return loc.subordinatesFollow",
                    "subordinateData": "return loc.subordinateDataFollow",
                    "update": "return false"
                  }
                }
              ],
              "waitForAll": false
            }
          ],
          "decorators": [
            {
              "id": "04859bac-4b00-4b06-b603-9058e6988cd7",
              "type": "loopForever",
              "name": "Loop forever"
            }
          ]
        }
      ],
      "active": true
    },
    {
      "name": "Check if leader is still valid",
      "id": "d19ebd42-5902-4863-987d-fe4fce568346",
      "type": "scriptAction",
      "decorators": [
        {
          "id": "e860a0b0-36d4-4bcc-9182-765f233584a0",
          "type": "loopForever",
          "name": "loop foreva"
        }
      ],
      "script": [
        "if loc.leaderTeam ~= nil then",
        "    local aliveSoldiersCount = 0",
        "    for s=0,loc.leaderTeam:GetEntityCount()-1 do",
        "        local soldier = loc.leaderTeam:GetEntity(s)",
        "        if soldier:IsAlive() then",
        "            aliveSoldiersCount = aliveSoldiersCount + 1",
        "        end",
        "    end",
        "    if aliveSoldiersCount < 2 then",
        "        loc.fireTeamLeader = nil",
        "        loc.leaderTeam = nil",
        "    end",
        "end",
        "",
        "if loc.fireTeamLeader == nil or not loc.fireTeamLeader:IsAlive() then",
        "    loc.fireTeamLeader = nil",
        "    loc.leaderTeam = nil",
        "    local fireTeamCount = self:GetChildGroupCount()",
        "    for i=0,fireTeamCount-1 do    ",
        "        local group = self:GetChildGroup(i)",
        "        local soldiersCount = group:GetEntityCount()",
        "        local aliveSoldiersCount = 0",
        "        for s=0,soldiersCount-1 do",
        "            local soldier = group:GetEntity(s)",
        "            if soldier:IsAlive() then",
        "                aliveSoldiersCount = aliveSoldiersCount + 1",
        "                if aliveSoldiersCount > 1 then",
        "                    loc.fireTeamLeader = soldier",
        "                    loc.leaderTeam = group",
        "                    break",
        "                end",
        "            end",
        "        end",
        "    end",
        "end",
        "",
        "if loc.fireTeamLeader == nil then",
        "    loc.noLeaderAvailable = true",
        "end"
      ]
    },
    {
      "name": "Draw debug or not to draw",
      "id": "523af7e9-059d-49b9-a5a7-9852c622ebb8",
      "type": "selector",
      "subtrees": [
        {
          "name": "Draw path with waypoints",
          "id": "c551c11a-ebc5-45e9-9015-97afda312015",
          "type": "scriptAction",
          "decorators": [
            {
              "id": "4f3b0ad0-04fb-4bab-8fc3-723529996bd4",
              "type": "scriptCondition",
              "name": "Debug enabled ?",
              "script": [
                "return arg.orderData.debugEnabled"
              ]
            },
            {
              "id": "b6cc4e7e-c186-4994-af17-4393922754d6",
              "type": "loopForever",
              "name": "Draw every frame"
            }
          ],
          "script": [
            "if",
            "    loc.path ~= nil",
            "then",
            "    local OFFSET = Vec3(0,0,2)",
            "    ai_core_public.draw.Path(",
            "        loc.path,",
            "        1, 0, 1, 1,",
            "        OFFSET",
            "    )",
            "    for i, waypoint in ipairs(loc.waypoints) do",
            "        --[\"Circle\"] = function(center, radius, r, g, b, a)",
            "        local color = Vec3(1,0,1)",
            "        if loc.nextWaypointIndex == i then",
            "            --color = Vec3(0,0,1)",
            "        end",
            "        ",
            "        ai_core_public.draw.Circle(",
            "            waypoint + OFFSET, ",
            "            2, ",
            "            color:X(), color:Y(), color:Z(), ",
            "            1",
            "        )",
            "    end",
            "end"
          ]
        },
        {
          "name": "Wait Forever",
          "id": "121ae642-2a80-42e4-bb1b-ea15f10e5ca8",
          "type": "waitForever"
        }
      ],
      "active": true
    }
  ],
  "meta": {
    "nodesInfo": [
      {
        "id": "9d340382-1648-4323-be7d-a539be304d1f",
        "position": "3637,607.274590476187"
      },
      {
        "id": "c765caa3-b893-403a-bb6c-dcfb7c5be9d8",
        "position": "4174.5,1032.27459047619"
      },
      {
        "id": "44e4d089-f76e-4d89-9827-9de06cc8ef52",
        "position": "3412,732.274590476186"
      },
      {
        "id": "1cfca328-2f4d-4497-ad95-8ef0e9883f9e",
        "position": "2187,782.274590476186"
      },
      {
        "id": "8006d54d-880c-4041-8126-d5f0478a3fb1",
        "position": "1824.5,944.774590476186"
      },
      {
        "id": "d5354e96-92b1-4700-8b94-5f039102d977",
        "position": "2199.5,944.774590476186"
      },
      {
        "id": "6dcfe5f9-7e35-4848-94b2-3fb02b7e8641",
        "position": "1612,1057.27459047619"
      },
      {
        "id": "2f4472eb-a8d7-46b3-8f48-394a5dd076a5",
        "position": "2199.5,1032.27459047619"
      },
      {
        "id": "a64e55ad-e696-4b44-a280-74ccb791e031",
        "position": "1937,1157.27459047619"
      },
      {
        "id": "38d78ac3-e597-41db-8f41-5574f70bcabc",
        "position": "2112,1157.27459047619"
      },
      {
        "id": "93e9c3bb-1177-420f-8991-c6d4f15a9cf7",
        "position": "2298.77400476195,1161.75238095238"
      },
      {
        "id": "22caf228-ca67-4065-af70-79ca73fc7a8b",
        "position": "2499.5,907.274590476187"
      },
      {
        "id": "38f9ded0-9e3d-4de3-990a-2e7827c4c185",
        "position": "2412,1032.27459047619"
      },
      {
        "id": "4b945e70-c600-472d-88a8-b94f3d170999",
        "position": "2712,1032.27459047619"
      },
      {
        "id": "86c0492d-0f87-4567-9794-94f9b2c2dff9",
        "position": "2937,1044.77459047619"
      },
      {
        "id": "00cbb27a-d5b0-42cf-a43e-93b1efe50e6d",
        "position": "2724.5,1169.77459047619"
      },
      {
        "id": "66d50744-b76f-49ae-955e-3dda10f36824",
        "position": "2912,1169.77459047619"
      },
      {
        "id": "5f1f46f3-964d-4c5c-9566-64bf826cc063",
        "position": "3249.5,1169.77459047619"
      },
      {
        "id": "ff00253f-4f06-4e67-ab40-9f60eb56c458",
        "position": "3837,1107.27459047619"
      },
      {
        "id": "36361d03-9339-4676-8ecd-7c694905a661",
        "position": "2799.5,1457.27459047619"
      },
      {
        "id": "86b69024-8272-48e5-8cee-aabdb11adc0e",
        "position": "2962,1457.27459047619"
      },
      {
        "id": "3e2d2b75-c507-4460-a714-7fd76c14b505",
        "position": "3149.5,1457.27459047619"
      },
      {
        "id": "1c093503-254d-48d9-a59c-f36ac9b81b6c",
        "position": "3337,1457.27459047619"
      },
      {
        "id": "a49e9721-012c-4a05-94e9-ae0e9f19f43f",
        "position": "3499.5,1457.27459047619"
      },
      {
        "id": "71b1e0e3-5304-4787-beb0-9dcbf22ec4da",
        "position": "3662,1457.27459047619"
      },
      {
        "id": "6ef23d72-8214-42b7-ae28-8a53d267264c",
        "position": "3912,1457.27459047619"
      },
      {
        "id": "cf6863f6-9c85-43fa-81f3-8568b8761e6c",
        "position": "3574.5,1632.27459047619"
      },
      {
        "id": "c12cccd7-1392-4bd5-9306-3102f6aedb5a",
        "position": "3387,1732.27459047619"
      },
      {
        "id": "c3f44006-0f2a-4a79-84bb-46e6e39491cf",
        "position": "3612,1732.27459047619"
      },
      {
        "id": "c6bb5ee9-67b3-4a30-968a-49d9ae6564b9",
        "position": "3899.5,1619.77459047619"
      },
      {
        "id": "f10380f0-d393-46d2-80b5-0248edec9c8c",
        "position": "3712,1844.77459047619"
      },
      {
        "id": "ba3ba65b-5414-4fbe-9735-c22289006e93",
        "position": "4037,1844.77459047619"
      },
      {
        "id": "437a60bb-79b2-47ac-a103-2f907df5e547",
        "position": "4312,1619.77459047619"
      },
      {
        "id": "d19ebd42-5902-4863-987d-fe4fce568346",
        "position": "3637,732.274590476186"
      },
      {
        "id": "523af7e9-059d-49b9-a5a7-9852c622ebb8",
        "position": "3899.5,732.274590476186"
      },
      {
        "id": "c551c11a-ebc5-45e9-9015-97afda312015",
        "position": "3899.5,844.774590476186"
      },
      {
        "id": "121ae642-2a80-42e4-bb1b-ea15f10e5ca8",
        "position": "4149.5,857.274590476186"
      }
    ],
    "editorObjects": [
      {
        "id": "c765caa3-b893-403a-bb6c-dcfb7c5be9d8",
        "type": "comment",
        "header": "TODO",
        "body": "Before success order all small teams to take cover instead of follow",
        "bodyAlignment": "Left",
        "headerBackground": "#FF00FF00",
        "headerForeground": "#FF000000",
        "boxBackground": "#FF90EE90",
        "boxForeground": "#FF000000"
      }
    ],
    "canvasSize": "6250.89305238097,2969.7745904762",
    "gridPadding": "12,7.27459047618663"
  },
  "parameters": [
    {
      "name": "orderData",
      "isOptional": false,
      "defaultValue": ""
    }
  ],
  "locals": {
    "subOrderData": "return nil",
    "subordinateData": "return nil",
    "subordinates": "return nil",
    "subOrderDataFollow": "return nil",
    "subordinateDataFollow": "return nil",
    "subordinatesFollow": "return nil",
    "noLeaderAvailable": "return false",
    "fireTeamLeader": "return nil",
    "path": "return nil",
    "pathQuery": "return nil",
    "paths": "return {}",
    "pathQueries": "return {}",
    "waypoints": "return {}",
    "runningFireTeam": "return nil",
    "nextWaypointIndex": "return 1",
    "smallFireTeams": "return {}",
    "leaderToFollow": "return nil",
    "leaderTeam": "return nil",
    "fireTeamLeaders": "return {}",
    "fireTeams": "return {}",
    "idleSet": "false"
  }
}