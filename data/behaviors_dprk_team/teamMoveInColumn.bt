{
  "name": "Root",
  "id": "ff97f97d-ae6d-469a-aa45-742c68aa6f97",
  "type": "sequence",
  "subtrees": [
    {
      "name": "Main",
      "id": "737a5e61-a51f-473d-9673-40ca5de2c35d",
      "type": "scriptAction",
      "script": [
        "-- function definitions --",
        "",
        "",
        "",
        "local do_debug = function(data, this)",
        "\tlocal offset = Vec3(0, 0, 2)",
        "\tif data.precomputedSegments ~= nil then",
        "\t\tfor i, segm in ipairs(data.precomputedSegments) do",
        "\t\t\tDebugLine(segm[1] + offset, segm[2] + offset, 1, 0, 0, 0.6)",
        "\t\t\tDebugLine(segm[2] + offset, segm[3] + offset, 0, 1, 0, 0.6)",
        "\t\t\tDebugLine(segm[3] + offset, segm[4] + offset, 0, 0, 1, 0.6)",
        "\t\t\tDebugLine(segm[4] + offset, segm[1] + offset, 1, 0, 1, 0.6)",
        "\t\tend",
        "\tend",
        "    if data.path ~= nil then",
        "        for i=0,(data.path:GetSegmentCount() - 1) do",
        "            DebugLine(data.path:GetSegmentStart(i) + offset, data.path:GetSegmentEnd(i) + offset, 1, 1, 1, 1) ",
        "        end",
        "    end",
        "end",
        "",
        "",
        "",
        "local start_new_path_request = function(leader, goalPosition)",
        "\t--DebugLog(\"Starting new path request\")",
        "    local existingPath = nil--leader:GetPath()",
        "    if existingPath ~= nil then",
        "        --return existingPath",
        "    end",
        "\treturn FindPath(leader:GetPosition(), goalPosition, {{ avoidance = 3 }})",
        "end",
        "",
        "",
        "-- data definition --",
        "",
        "local SHOOTING_STATE_cooldown = 0",
        "local SHOOTING_STATE_shooting = 1",
        "",
        "if loc.mainData == nil then",
        "\tloc.mainData = {",
        "\t\tpath = nil,",
        "\t\tpathRequest = nil,",
        "        pathRequestCooldown = TimedCounter(),",
        "\t\tlastSoldiersList = nil,",
        "\t\tlastLeader = nil,",
        "\t\tprecomputedSegments = nil,",
        "\t\tshootingTimer = TimedCounter(),",
        "\t\tshootingState = SHOOTING_STATE_cooldown,",
        "\t\tlastDetectedEnemies = {}",
        "\t} ",
        "end",
        "",
        "",
        "local data = loc.mainData",
        "",
        "-- implementation --",
        "",
        "do_debug(data, self)",
        "",
        "",
        "",
        "local goalPosition = arg.orderData.target",
        "",
        "",
        "",
        "local soldiers = util.get_alive_soldiers(self)",
        "if #soldiers < 1 then",
        "\tDebugLog(\"No soldiers left alive! (\" .. tostring(self) .. \")\")",
        "    for entity in self:GetEntities() do",
        "        DebugLog(\" --entity: \" .. tostring(entity))",
        "    end",
        "    for k, entity in pairs(soldiers) do",
        "        DebugLog(\" ++entity: \" .. tostring(entity))",
        "    end",
        "\treturn",
        "end",
        "local leader = self:GetLeader()",
        "local subordinates = util.get_without(soldiers, leader)",
        "",
        "",
        "if data.pathRequest ~= nil and data.pathRequest:IsReady() then",
        "\tdata.path = data.pathRequest:Value()",
        "\tdata.pathRequest = nil",
        "\tdata.precomputedSegments = mic.get_path_segments(data.path)",
        "end",
        "",
        "if data.pathRequest == nil and (data.pathRequestCooldown:CurrentValue() <= 0) then",
        "\tdata.pathRequest = start_new_path_request(leader, goalPosition)",
        "    data.pathRequestCooldown = data.pathRequestCooldown:Incremented(1, mic.SECONDS_BETWEEN_PATH_RECOMPUTES)",
        "end",
        "",
        "",
        "if data.path == nil then",
        "\treturn",
        "end",
        "",
        "",
        "",
        "",
        "local is_enemies_reporting_dirty = false",
        "",
        "if util.compare_did_change(data.lastSoldiersList, soldiers) or (data.lastLeader ~= leader) then",
        "\tlocal soldiersInOrder = util.concat_arrays({leader}, subordinates)",
        "",
        "\tfor i, soldier in ipairs(soldiersInOrder) do",
        "\t\tmic.init_member(self, soldier, soldiersInOrder)",
        "\tend",
        "\tis_enemies_reporting_dirty = true",
        "end",
        "",
        "",
        "local detected_enemies = {}",
        "local detected_enemies_array = {}",
        "if data.precomputedSegments ~= nil then",
        "    for i, segment in ipairs(data.precomputedSegments) do",
        "        local segment_enemies = self:GetEnemiesInArea(segment[1], segment[2], segment[3], segment[4])",
        "\t\tfor ii, enemy in ipairs(segment_enemies) do",
        "\t\t\tif not detected_enemies[tostring(enemy)] then",
        "\t\t\t\tdetected_enemies_array[(#detected_enemies_array) + 1] = enemy",
        "\t\t\tend",
        "\t\t\tdetected_enemies[tostring(enemy)] = true",
        "\t\tend",
        "\tend",
        "\tif not util.set_equals(detected_enemies, data.lastDetectedEnemies) then",
        "\t\tdata.lastDetectedEnemies = detected_enemies",
        "\t\tis_enemies_reporting_dirty = true",
        "\tend",
        "end",
        "",
        "",
        "if is_enemies_reporting_dirty then",
        "    for enemy, i_ in pairs(detected_enemies) do",
        "        DebugLog(\"sighted enemy: \" .. enemy)",
        "    end",
        "    for i, soldier in ipairs(soldiers) do",
        "\t    messaging.send_order_details(self, soldier, {",
        "\t\t    messageType = \"enemies_sighted\",",
        "\t\t    enemies = detected_enemies_array",
        "\t    })",
        "    end",
        "\tis_enemies_reporting_dirty = false",
        "end",
        "",
        "",
        "data.lastSoldiersList = soldiers",
        "data.lastLeader = leader"
      ]
    }
  ],
  "decorators": [
    {
      "id": "dd488c87-904a-4f04-bfd8-ab3113ebdf7b",
      "type": "loopForever",
      "name": "RootLooper"
    }
  ],
  "meta": {
    "nodesInfo": [
      {
        "id": "ff97f97d-ae6d-469a-aa45-742c68aa6f97",
        "position": "1750,421.933333333333"
      },
      {
        "id": "737a5e61-a51f-473d-9673-40ca5de2c35d",
        "position": "1750,621.933333333333"
      }
    ],
    "editorObjects": [],
    "canvasSize": "3840,2596.93333333333",
    "gridPadding": "0,9.43333333333317"
  },
  "parameters": [
    {
      "name": "orderData",
      "isOptional": false,
      "defaultValue": ""
    }
  ],
  "locals": {
    "mainData": "nil"
  }
}