{
  "name": "Root",
  "id": "ff97f97d-ae6d-469a-aa45-742c68aa6f97",
  "type": "sequence",
  "subtrees": [
    {
      "name": "Main",
      "id": "737a5e61-a51f-473d-9673-40ca5de2c35d",
      "type": "scriptAction",
      "script": [
        "local NEW_ORDER_MESSAGE_TYPE = \"NewOrder\"",
        "local ORDER_DETAILS_MESSAGE_TYPE = \"OrderDetails\"",
        "",
        "local init_members = function(group_members_array) ",
        "    for i, member in ipairs(group_members_array) do",
        "\t\tself:SendMessage(member, NEW_ORDER_MESSAGE_TYPE, {",
        "\t\t\torderName = \"MoveInColumn\",",
        "\t\t\ttarget = arg.orderData.target,",
        "\t\t\tgroupBrain = self",
        "\t\t})",
        "    end",
        "end",
        "",
        "local message_order_details = function(target_entity, messageData)",
        "\tDebugLog(\"Sending details \" .. tostring(messageData.messageType) .. \" to \" .. tostring(target_entity))",
        "\tself:SendMessage(target_entity, ORDER_DETAILS_MESSAGE_TYPE, messageData)",
        "end",
        "",
        "",
        "local compare_did_change = function(old_array, new_array)",
        "\tif (old_array == nil) ~= (new_array == nil) then",
        "\t\treturn true",
        "\tend",
        "\tif (#old_array) ~= (#new_array) then ",
        "\t\treturn true ",
        "\tend",
        "\tfor i, old_member in ipairs(old_array) do",
        "\t\tif old_member ~= new_array[i] then",
        "\t\t\treturn true",
        "\t\tend",
        "\tend",
        "\treturn false",
        "end",
        "",
        "local get_tail = function(arr, start_idx) ",
        "\tlocal ret = {}",
        "\tif #arr >= start_idx then",
        "\t\tfor i=start_idx, (#arr) do",
        "\t\t\tret[(#ret) + 1] = arr[i]",
        "\t\tend",
        "\tend",
        "\treturn ret",
        "end",
        "",
        "local get_alive_soldiers = function(this)",
        "\tlocal ret = {}",
        "\tfor soldier in this:GetEntities() do",
        "\t\tif soldier:IsAlive() then",
        "\t\t\tret[(#ret) + 1] = soldier",
        "\t\tend",
        "\tend",
        "\treturn ret",
        "end",
        "",
        "local do_debug = function(data, this)",
        "\tlocal offset = Vec3(0, 0, 2)",
        "\tif data.precomputedSegments ~= nil then",
        "\t\tfor i, segm in ipairs(data.precomputedSegments) do",
        "\t\t\tDebugLine(segm[1] + offset, segm[2] + offset, 1, 0, 0, 0.6)",
        "\t\t\tDebugLine(segm[2] + offset, segm[3] + offset, 0, 1, 0, 0.6)",
        "\t\t\tDebugLine(segm[3] + offset, segm[4] + offset, 0, 0, 1, 0.6)",
        "\t\t\tDebugLine(segm[4] + offset, segm[1] + offset, 1, 0, 1, 0.6)",
        "\t\tend",
        "\tend",
        "end",
        "",
        "",
        "local eval_path_request = function(data)",
        "\tDebugLog(\"Evaluating path request\")",
        "\tlocal PATH_SEGMENT_LENGTH = 30",
        "\tlocal PATH_SEGMENT_WIDTH = 50",
        "\tlocal PATH_SEGMENT_LENGTH_OVERSHOOT = 2.5",
        "\tlocal PREPARED_SEGMENTS_COUNT = 3",
        "",
        "\tdata.path = data.pathRequest:Value()",
        "\tdata.pathRequest = nil",
        "\tdata.precomputedSegments = {}",
        "\t",
        "\tlocal totalPathLength = data.path:Length()",
        "\tfor i=1,PREPARED_SEGMENTS_COUNT do",
        "\t\tlocal beginDistance = (i - 1) * PATH_SEGMENT_LENGTH",
        "\t\tlocal endDistance =  math.min((i* PATH_SEGMENT_LENGTH), totalPathLength)",
        "\t\tif beginDistance >= totalPathLength then",
        "\t\t\tbreak",
        "\t\tend",
        "\t\tlocal beginPos = data.path:PositionAlongPath(beginDistance)",
        "\t\tlocal endPos = data.path:PositionAlongPath(endDistance)",
        "\t\tlocal segmentDirection = (endPos - beginPos):Normalized()",
        "\t\tlocal segmentOrtho = (PATH_SEGMENT_WIDTH*0.5) * segmentDirection:RightPerpendicularXY()",
        "\t\tbeginPos = beginPos - (PATH_SEGMENT_LENGTH_OVERSHOOT * segmentDirection)",
        "\t\tendPos = endPos + (PATH_SEGMENT_LENGTH_OVERSHOOT * segmentDirection)",
        "\t\tlocal segment = {beginPos - segmentOrtho, beginPos + segmentOrtho, endPos + segmentOrtho, endPos - segmentOrtho }",
        "\t\tdata.precomputedSegments[(#data.precomputedSegments) + 1] = segment",
        "\tend",
        "end",
        "",
        "",
        "local start_new_path_request = function(leader, goalPosition)",
        "\tDebugLog(\"Starting new path request\")",
        "\treturn FindPath(leader:GetPosition(), goalPosition, {{ avoidance = 3 }})",
        "end",
        "",
        "local SHOOTING_STATE_cooldown = 0",
        "local SHOOTING_STATE_shooting = 1",
        "",
        "if loc.mainData == nil then",
        "\tloc.mainData = {",
        "\t\tpath = nil,",
        "\t\tpathRequest = nil,",
        "\t\tlastSoldiersList = nil,",
        "\t\tprecomputedSegments = nil,",
        "\t\tshootingTimer = TimedCounter(),",
        "\t\tshootingState = SHOOTING_STATE_cooldown",
        "\t} ",
        "end",
        "",
        "",
        "local data = loc.mainData",
        "",
        "",
        "do_debug(data, self)",
        "",
        "",
        "",
        "",
        "local goalPosition = arg.orderData.target",
        "",
        "",
        "",
        "local soldiers = get_alive_soldiers(self)",
        "if #soldiers < 1 then",
        "\tDebugLog(\"No soldiers left alive!\")",
        "\treturn",
        "end",
        "local leader = soldiers[1]",
        "local subordinates = get_tail(soldiers, 2)",
        "",
        "",
        "if data.pathRequest ~= nil and data.pathRequest:IsReady() then",
        "\teval_path_request(data)",
        "end",
        "",
        "",
        "if data.path == nil then",
        "\tif data.pathRequest == nil then",
        "\t\tdata.pathRequest = start_new_path_request(leader, goalPosition)",
        "\tend",
        "\treturn",
        "end",
        "",
        "",
        "",
        "",
        "",
        "",
        "if compare_did_change(data.lastSoldiersList, soldiers) then",
        "\tinit_members(soldiers)",
        "\t",
        "end",
        "",
        "message_order_details(leader, {messageType = \"follow\", follow = leader})",
        "local precedingSoldier = leader",
        "for i, soldier in ipairs(subordinates) do",
        "\tmessage_order_details(soldier, {messageType = \"follow\", follow = precedingSoldier})",
        "\tprecedingSoldier = soldier",
        "end",
        "",
        "",
        "data.lastSoldiersList = soldiers"
      ]
    }
  ],
  "decorators": [
    {
      "id": "dd488c87-904a-4f04-bfd8-ab3113ebdf7b",
      "type": "loopForever",
      "name": "RootLooper"
    }
  ],
  "meta": {
    "nodesInfo": [
      {
        "id": "ff97f97d-ae6d-469a-aa45-742c68aa6f97",
        "position": "1750,421.933333333333"
      },
      {
        "id": "737a5e61-a51f-473d-9673-40ca5de2c35d",
        "position": "1750,621.933333333333"
      }
    ],
    "editorObjects": [],
    "canvasSize": "3840,2596.93333333333",
    "gridPadding": "0,9.43333333333317"
  },
  "parameters": [
    {
      "name": "orderData",
      "isOptional": false,
      "defaultValue": ""
    }
  ],
  "locals": {
    "mainData": "nil"
  }
}