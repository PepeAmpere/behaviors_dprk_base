{
  "name": "Start",
  "id": "22e36424-ea64-47dd-b1b9-aa5a18c317ef",
  "type": "sequence",
  "subtrees": [
    {
      "name": "Initial route setting",
      "id": "dd6c62ff-e772-4ab8-b2e1-76aaaf19418e",
      "type": "sequence",
      "subtrees": [
        {
          "name": "Setup: Create route to objective",
          "id": "9d34a6bc-1e0f-4481-b615-280bbd2277b3",
          "type": "scriptAction",
          "script": [
            "local lead=self:GetLeader()",
            "loc.route= FindPath(lead:GetPosition(), arg.orderData.position)"
          ]
        },
        {
          "name": "Route is calculated",
          "id": "5d5e4a57-bf34-481b-9a33-0351f51ebc59",
          "type": "waitUntil",
          "condition": [
            "if loc.route~=nil then",
            "    return loc.route:IsReady()",
            "else",
            "    return false",
            "end"
          ]
        }
      ]
    },
    {
      "name": "Special situations selector",
      "id": "cb292c6c-7f1d-4c6f-88d2-e97cfec206f1",
      "type": "selector",
      "subtrees": [
        {
          "name": "Set Occupy and leave it",
          "id": "c48b1293-7008-4ced-8703-aa8a3ada6d19",
          "type": "sequence",
          "subtrees": [
            {
              "name": "Send Autonomous Defend order (Swap for TeamIdle)",
              "id": "eaeb8187-92f0-4885-9928-ac7eb5f394cf",
              "type": "scriptAction"
            },
            {
              "name": "Wait Forever",
              "id": "84bdd10d-4bb1-44bd-9903-476da17d5d20",
              "type": "waitForever"
            }
          ],
          "decorators": [
            {
              "id": "91c62cbb-289d-4e55-a72f-186f1b4a5f07",
              "type": "scriptCondition",
              "name": "Everyone is close enough to goal",
              "script": [
                "return false"
              ]
            }
          ]
        },
        {
          "name": "<unnamed>",
          "id": "90488be4-7c90-4780-9375-9b726e01e0ed",
          "type": "sequence",
          "subtrees": [
            {
              "name": "Throw survivor at objective",
              "id": "94bab3cc-3701-4c1b-a631-ceabebbe6d22",
              "type": "scriptAction"
            },
            {
              "name": "Pray",
              "id": "c5a072f3-9631-4fc7-ace6-a0db5bcfb037",
              "type": "waitForever"
            }
          ],
          "decorators": [
            {
              "id": "a99b7451-be0a-4cad-bc50-d451e2597e81",
              "type": "scriptCondition",
              "name": "'<=1 troop' failsafe",
              "script": [
                "return false"
              ]
            }
          ]
        },
        {
          "name": "Run and draw debugs",
          "id": "23ea458b-248a-4924-8415-265a98c5683b",
          "type": "supervisedParallel",
          "subtrees": [
            {
              "name": "Movement sequence: One step",
              "id": "a42e27ab-91ea-4556-b4cf-a5e1e19efa24",
              "type": "sequence",
              "subtrees": [
                {
                  "name": "Team Rebalancer",
                  "id": "746fd8e8-9e59-419d-9c78-5c5496c29e56",
                  "type": "scriptAction",
                  "script": [
                    "local entityCount=self:GetEntityCount()",
                    "if loc.subteamMoving==nil or loc.subteamStatic==nil then",
                    "    --create teams from scratch",
                    "    loc.subteamMoving={}",
                    "    loc.subteamStatic={}",
                    "    local x=1",
                    "    local y=1",
                    "    for i = 1, entityCount do",
                    "        if i<=entityCount/2 then",
                    "            loc.subteamStatic[x]=self:GetEntity(i-1)",
                    "            x=x+1",
                    "        else",
                    "            loc.subteamMoving[y]=self:GetEntity(i-1)",
                    "            y=y+1",
                    "        end",
                    "    end",
                    "else",
                    "    --count alive soldiers and redistribute",
                    "    --TODO: Redistribution (Later)",
                    "    loc.distAlongRoute=loc.distAlongRoute+loc.teamHopDist",
                    "    local temp=loc.subteamMoving",
                    "    loc.subteamMoving=loc.subteamStatic",
                    "    loc.subteamStatic=temp",
                    "end",
                    "--TODO: We need to actually reduce the travel dist if soldiers die on the way"
                  ]
                },
                {
                  "name": "Find covers",
                  "id": "dabf980a-197e-42aa-809b-f53e1e5dd991",
                  "type": "sequence",
                  "subtrees": [
                    {
                      "name": "Calculate covers",
                      "id": "29e7e202-bb4c-447f-8766-078781d232b2",
                      "type": "scriptAction",
                      "script": [
                        "local threats = {",
                        "    {area = Circle(loc.route:Value():EndPoint(), 3), avoidance = 1}",
                        "}",
                        "",
                        "local goal=loc.route:Value():PositionAlongPath(loc.distAlongRoute)",
                        "local offset = loc.teamCoverSearchDist",
                        "",
                        "local area= Circle(goal, offset)",
                        "",
                        "local entityCount=self:GetEntityCount()",
                        "local positions = {}",
                        "for i=1, entityCount do",
                        "    --we assign the center if there are no good positions. Not much I can do before the consult",
                        "    positions[i]=goal",
                        "end",
                        "",
                        "loc.covers = FindCovers(threats, area, positions,     ",
                        "{",
                        "    weights = {",
                        "        protection = 50,",
                        "        distance = -1,",
                        "        lineOfFire = 0,",
                        "        }   ",
                        "    }",
                        ")"
                      ]
                    },
                    {
                      "name": "Wait until covers request done",
                      "id": "01e58503-8a54-4244-8c08-418249113bbc",
                      "type": "waitUntil",
                      "condition": [
                        "return loc.covers:IsReady() "
                      ]
                    }
                  ]
                },
                {
                  "name": "Send orders to teams (TODO EXPAND)",
                  "id": "714c9d27-462d-4af1-bb11-b05420e3c4e3",
                  "type": "scriptAction",
                  "script": [
                    "local covers=loc.covers:Value()",
                    "loc.coverTroopsAlloc={}",
                    "for i = 1, #loc.subteamMoving do",
                    "    local oData={}",
                    "    oData.orderName=\"Move\"",
                    "    oData.position=covers[i].position",
                    "    loc.coverTroopsAlloc[loc.subteamMoving[i]]=covers[i]",
                    "    ",
                    "    self:SendMessage(",
                    "        loc.subteamMoving[i],",
                    "        \"NewOrder\",",
                    "        oData",
                    "    )",
                    "end",
                    "--[=====[",
                    "--soooo, this ain't working for now.",
                    "for i=1, #loc.subteamStatic do",
                    "    local oData={}",
                    "    oData.orderName=\"Suppress\"",
                    "    oData.entityToFireAt=loc.route:Value():EndPoint()",
                    "    oData.position=loc.route:Value():EndPoint()",
                    "    --Could use with some minor offsets perhaps",
                    "    self:SendMessage(",
                    "        loc.subteamStatic[i],",
                    "        \"NewOrder\",",
                    "        oData",
                    "    )",
                    "end",
                    "--]=====]",
                    "    "
                  ]
                },
                {
                  "name": "All alive move team members at given pos",
                  "id": "75ef436f-f3f1-4116-aeed-23f010bd2be1",
                  "type": "waitUntil",
                  "condition": [
                    "local allFulfilled=true",
                    "--local pos=loc.route:Value():PositionAlongPath(loc.distAlongRoute)",
                    "for i = 1, #loc.subteamMoving do",
                    "    local soldier=loc.subteamMoving[i]",
                    "    local soldierPos=soldier:GetPosition()",
                    "    local pos=loc.coverTroopsAlloc[soldier].position  ",
                    "    if soldier:IsAlive() and soldierPos:Distance(pos)>1 then",
                    "        allFulfilled=false",
                    "    end",
                    "end",
                    "if allFulfilled then",
                    "    loc.distAlongRoute=loc.distAlongRoute+loc.teamHopDist",
                    "    --putting it here is messy, but guaranteed to work",
                    "end",
                    "return allFulfilled"
                  ]
                },
                {
                  "name": "Wait 5s so soldiers end moves for sure",
                  "id": "eba69077-a194-4bde-abe7-7616bc47374b",
                  "type": "wait",
                  "time": [
                    "return 5"
                  ]
                }
              ]
            },
            {
              "name": "Draw route the group will run along",
              "id": "96f8add5-4c34-4034-98c6-cd22c613b3e4",
              "type": "scriptAction",
              "script": [
                "local lineVec=Vec3(0,0,2)",
                "local future = loc.route",
                "if future:IsReady() then",
                "  local path = future:Value()",
                "  if path ~= nil then",
                "    for i=0, path:GetSegmentCount()-1 do",
                "    -- entity is following a path, draw it",
                "        DebugLine(",
                "                path:GetSegmentStart(i)+lineVec,",
                "                path:GetSegmentEnd(i)+lineVec,",
                "                1,0,1,1",
                "            )",
                "    end",
                "  end",
                "end"
              ]
            }
          ]
        }
      ],
      "decorators": [
        {
          "id": "d31c6a44-675c-4436-b343-f1bbe23ad6c2",
          "type": "loopForever",
          "name": "Loop-Movement"
        }
      ],
      "active": true
    }
  ],
  "meta": {
    "nodesInfo": [
      {
        "id": "22e36424-ea64-47dd-b1b9-aa5a18c317ef",
        "position": "1462.5,330.2"
      },
      {
        "id": "26bffa7f-cb4f-4e85-9f87-ca698aa31ff1",
        "position": "1150,767.7"
      },
      {
        "id": "5e1b1618-0225-472a-8d90-dd8d3b2899ff",
        "position": "550,792.7"
      },
      {
        "id": "d391bc60-706a-4fa4-8782-118bebd85da0",
        "position": "1225,1167.7"
      },
      {
        "id": "dd6c62ff-e772-4ab8-b2e1-76aaaf19418e",
        "position": "1137.5,492.7"
      },
      {
        "id": "9d34a6bc-1e0f-4481-b615-280bbd2277b3",
        "position": "975,605.2"
      },
      {
        "id": "5d5e4a57-bf34-481b-9a33-0351f51ebc59",
        "position": "1212.5,605.2"
      },
      {
        "id": "cb292c6c-7f1d-4c6f-88d2-e97cfec206f1",
        "position": "1600,592.7"
      },
      {
        "id": "c48b1293-7008-4ced-8703-aa8a3ada6d19",
        "position": "775,767.7"
      },
      {
        "id": "eaeb8187-92f0-4885-9928-ac7eb5f394cf",
        "position": "575,980.2"
      },
      {
        "id": "84bdd10d-4bb1-44bd-9903-476da17d5d20",
        "position": "962.5,980.2"
      },
      {
        "id": "90488be4-7c90-4780-9375-9b726e01e0ed",
        "position": "1262.5,767.7"
      },
      {
        "id": "94bab3cc-3701-4c1b-a631-ceabebbe6d22",
        "position": "1137.5,905.2"
      },
      {
        "id": "c5a072f3-9631-4fc7-ace6-a0db5bcfb037",
        "position": "1350,905.2"
      },
      {
        "id": "23ea458b-248a-4924-8415-265a98c5683b",
        "position": "1837.5,730.2"
      },
      {
        "id": "a42e27ab-91ea-4556-b4cf-a5e1e19efa24",
        "position": "1600,867.7"
      },
      {
        "id": "746fd8e8-9e59-419d-9c78-5c5496c29e56",
        "position": "1312.5,1130.2",
        "height": 52.0
      },
      {
        "id": "dabf980a-197e-42aa-809b-f53e1e5dd991",
        "position": "1612.5,1130.2"
      },
      {
        "id": "29e7e202-bb4c-447f-8766-078781d232b2",
        "position": "1525,1230.2"
      },
      {
        "id": "01e58503-8a54-4244-8c08-418249113bbc",
        "position": "1675,1230.2"
      },
      {
        "id": "714c9d27-462d-4af1-bb11-b05420e3c4e3",
        "position": "1775,1130.2"
      },
      {
        "id": "75ef436f-f3f1-4116-aeed-23f010bd2be1",
        "position": "2062.5,1130.2"
      },
      {
        "id": "eba69077-a194-4bde-abe7-7616bc47374b",
        "position": "2375,1130.2"
      },
      {
        "id": "96f8add5-4c34-4034-98c6-cd22c613b3e4",
        "position": "1837.5,867.7"
      }
    ],
    "editorObjects": [
      {
        "id": "26bffa7f-cb4f-4e85-9f87-ca698aa31ff1",
        "type": "comment",
        "header": "",
        "body": "Currently disabled",
        "bodyAlignment": "Left",
        "headerBackground": "#FF00FF00",
        "headerForeground": "#FF000000",
        "boxBackground": "#FF90EE90",
        "boxForeground": "#FF000000"
      },
      {
        "id": "5e1b1618-0225-472a-8d90-dd8d3b2899ff",
        "type": "comment",
        "header": "",
        "body": "Currently disabled\r\nShould always happen after initial trigger",
        "bodyAlignment": "Left",
        "headerBackground": "#FF00FF00",
        "headerForeground": "#FF000000",
        "boxBackground": "#FF90EE90",
        "boxForeground": "#FF000000"
      },
      {
        "id": "d391bc60-706a-4fa4-8782-118bebd85da0",
        "type": "comment",
        "header": "",
        "body": "Missing the rebalance part",
        "bodyAlignment": "Left",
        "headerBackground": "#FF00FF00",
        "headerForeground": "#FF000000",
        "boxBackground": "#FF90EE90",
        "boxForeground": "#FF000000"
      }
    ],
    "canvasSize": "3840,2855.2",
    "gridPadding": "0,5.19999999999999"
  },
  "parameters": [
    {
      "name": "orderData",
      "isOptional": false,
      "evaluation": "passByReference"
    }
  ],
  "locals": {
    "route": "return nil",
    "distAlongRoute": "return 20",
    "subteamMoving": "return nil",
    "subteamStatic": "return nil",
    "teamHopDist": "return 20",
    "teamCoverSearchDist": "return 8",
    "covers": "return nil",
    "coverTroopsAlloc": "return nil"
  }
}