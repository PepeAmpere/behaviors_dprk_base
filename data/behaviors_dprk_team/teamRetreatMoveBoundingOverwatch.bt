{
  "name": "Sequence",
  "id": "5e53c10e-e460-4051-b8dc-5c4d74c180cf",
  "type": "sequence",
  "subtrees": [
    {
      "name": "Setup updateData",
      "id": "b81ec0d6-b111-44fe-bc1b-c2d0223d6ec3",
      "type": "scriptAction",
      "script": [
        "loc.updateData = {}",
        "",
        "local group = self",
        "local count = group:GetEntityCount()",
        "DebugLog(\"Count: \" .. count)",
        "",
        "for i = 0, count - 1 do",
        "    local soldier = group:GetEntity(i)",
        "    if soldier and soldier:Valid() then",
        "        table.insert(loc.updateData, {",
        "            unit = soldier,",
        "            index = i,",
        "            state = \"unknown\",",
        "            hasDoneOrder = false",
        "        })",
        "        DebugLog(\"Soldier: \" .. soldier)",
        "    end",
        "end",
        "DebugLog(\"------------\")"
      ]
    },
    {
      "name": "Setup roles",
      "id": "30f7eafd-e1ac-4198-af6c-1c78091bd2dc",
      "type": "scriptAction",
      "script": [
        "local data = loc.updateData",
        "local total = #data",
        "local half = math.floor(total / 2)",
        "",
        "for i, soldierData in ipairs(data) do",
        "    if i <= half then",
        "        soldierData.state = loc.move",
        "    else",
        "        soldierData.state = loc.cover",
        "    end",
        "    DebugLog(\"Unit \" .. i .. \" assigned state: \" .. soldierData.state)",
        "end",
        "DebugLog(\"------------\")"
      ]
    },
    {
      "name": "Set start pos",
      "id": "c969f41d-f475-4a90-adbb-363180db33d1",
      "type": "scriptAction",
      "script": [
        "local firstSoldier = loc.updateData[1].unit",
        "",
        "arg.orderData.startPos = firstSoldier:GetPosition()",
        "arg.orderData.check = 1"
      ]
    },
    {
      "name": "Supervised Parallel",
      "id": "2b4db328-6cfb-4b6f-9d35-624f503eefe9",
      "type": "supervisedParallel",
      "subtrees": [
        {
          "name": "Run actions",
          "id": "d2761efa-0615-40b3-ba21-f4cdfe95f665",
          "type": "selector",
          "subtrees": [
            {
              "name": "Set order Wait ",
              "id": "9d4a9a1e-7a63-4501-b433-e5b21c39eccf",
              "type": "scriptAction",
              "decorators": [
                {
                  "id": "b35396b1-ef52-4f0d-9e01-d3ae4b32902d",
                  "type": "scriptCondition",
                  "name": "Order update",
                  "script": [
                    "return loc.orderReady"
                  ]
                },
                {
                  "id": "782bb409-0790-4060-a6e6-0754242b88ce",
                  "type": "scriptCondition",
                  "name": "Is Team Close To Target Position",
                  "script": [
                    "return IsTeamCloseToTargetPosition(loc.reachThreshold, arg.orderData.position, loc.updateData, loc.deadState)"
                  ]
                }
              ],
              "script": [
                "arg.orderData.orderName = loc.wait",
                "local orderName = loc.wait",
                "DebugLog(\"DONE DONE DONE DONE\")",
                "",
                "for i, data in ipairs(loc.updateData) do",
                "    if data.state ~= loc.deadState then",
                "        self:SendMessage(",
                "                data.unit, ",
                "                orderName,",
                "                arg.orderData)",
                "        DebugLog(\"Send message to: \" .. data.unit .. \" with orderName: \" .. orderName)",
                "    end",
                "end"
              ]
            },
            {
              "name": "Send order to soldier sequence",
              "id": "370f83f1-3c48-4d02-bd06-ff1ea8b512f2",
              "type": "sequence",
              "subtrees": [
                {
                  "name": "Find covers",
                  "id": "a390967c-24b8-4c30-98df-94948a04328b",
                  "type": "sequence",
                  "subtrees": [
                    {
                      "name": "Path Request",
                      "id": "ccb8a974-dcc4-4b0f-a6e6-2c08f14caa09",
                      "type": "scriptAction",
                      "script": [
                        "local firstSoldier = GetFirstSoldier(loc.updateData, loc.move)",
                        "",
                        "loc.pathRequest = FindPath(firstSoldier:GetPosition(), arg.orderData.position)"
                      ]
                    },
                    {
                      "name": "Path ready",
                      "id": "29793eeb-a9f9-4766-bb5f-714695bb56a1",
                      "type": "waitUntil",
                      "condition": [
                        "if loc.pathRequest:IsReady() then",
                        "    loc.path = loc.pathRequest:Value()",
                        "    return true",
                        "end",
                        "return false"
                      ]
                    },
                    {
                      "name": "Calculate covers",
                      "id": "9db1807c-e571-4ebd-9fdb-e4ca9a3f6d94",
                      "type": "scriptAction",
                      "script": [
                        "local threats = {",
                        "    {area = Circle(arg.orderData.target, 5), avoidance = 1}",
                        "}",
                        "",
                        "local startStepDistance = 15",
                        "local defaultStepDistance = 30",
                        "",
                        "local moveDistance = startStepDistance",
                        "",
                        "if (loc.switch) then",
                        "    moveDistance = defaultStepDistance",
                        "end",
                        "",
                        "loc.switch = not loc.switch",
                        "",
                        "local posAlongPath = loc.path:PositionAlongPath(moveDistance)",
                        "",
                        "local half = 15",
                        "",
                        "local verts = {",
                        "    posAlongPath + Vec3(-half, 0, 2),",
                        "    posAlongPath + Vec3( half, 0, 2),",
                        "    posAlongPath + Vec3( half,  half, 2),",
                        "    posAlongPath + Vec3(-half,  half, 2),",
                        "}",
                        "",
                        "loc.coverArea = {polygon = Polygon(verts), verts = verts }",
                        "",
                        "",
                        "if loc.updateData and #loc.updateData > 0 then",
                        "    local firstSoldier = loc.updateData[1].unit",
                        "    if firstSoldier and firstSoldier:Valid() then",
                        "        local positions = { ",
                        "            loc.updateData[1].unit:GetPosition(), ",
                        "            loc.updateData[2].unit:GetPosition(),",
                        "            loc.updateData[3].unit:GetPosition(),",
                        "            loc.updateData[4].unit:GetPosition()",
                        "     }",
                        "",
                        "        loc.coversRequest = FindCovers(threats, loc.coverArea.polygon, positions,     ",
                        "        {",
                        "        weights = {",
                        "            protection = 50,",
                        "            distance = -1,",
                        "            lineOfFire = 20,",
                        "            }   ",
                        "        })",
                        "    end",
                        "end"
                      ]
                    },
                    {
                      "name": "Wait until covers request done",
                      "id": "97bc9c16-b2eb-4517-8c5a-c75bbd5165eb",
                      "type": "waitUntil",
                      "condition": [
                        "if loc.coversRequest:IsReady() then",
                        "    loc.covers = loc.coversRequest:Value()",
                        "    return true",
                        "end",
                        "return false"
                      ]
                    }
                  ]
                },
                {
                  "name": "Set enemy area polygon",
                  "id": "9ee21c46-225d-4801-8a47-9870391a5124",
                  "type": "scriptAction",
                  "script": [
                    "local firstSoldier = GetFirstSoldier(loc.updateData, loc.cover)",
                    "",
                    "local myPosition = firstSoldier:GetPosition()",
                    "",
                    "local half = 25",
                    "",
                    "local verts = {",
                    "    myPosition + Vec3(-half, -half, 2),",
                    "    myPosition + Vec3( half, -half, 2),",
                    "    myPosition + Vec3( half,  half, 2),",
                    "    myPosition + Vec3(-half,  half, 2),",
                    "}",
                    "",
                    "if loc.enemiesAreaPoints == nil then",
                    "    loc.enemiesAreaPoints = {}",
                    "end",
                    "",
                    "for i, v in ipairs(verts) do",
                    "    table.insert(loc.enemiesAreaPoints, v)",
                    "end",
                    "",
                    "arg.orderData.enemyPolygon = Polygon(loc.enemiesAreaPoints)"
                  ]
                },
                {
                  "name": "Select cover spot",
                  "id": "88dfa407-8333-4a74-bc3d-58930ab7f9ac",
                  "type": "scriptAction",
                  "script": [
                    "local bias = -10",
                    "local avoidanceRadius = 10",
                    "",
                    "loc.previousCoverSpot = loc.coverSpot",
                    "loc.coverSpot = nil",
                    "",
                    "local firstSoldier = GetFirstSoldier(loc.updateData, loc.move)",
                    "if firstSoldier == nil then end",
                    "",
                    "local pos = firstSoldier:GetPosition()",
                    "local target = arg.orderData.position",
                    "",
                    "local distanceToTarget = pos:Distance(target) + bias",
                    "",
                    "if loc.covers ~= nil then",
                    "    for i, cover in ipairs(loc.covers) do",
                    "        if cover.edgeStart and cover.edgeEnd then",
                    "            if loc.previousCoverSpot ~= nil and loc.previousCoverSpot:Distance(cover.position) < avoidanceRadius then",
                    "                goto continue",
                    "            end",
                    "            ",
                    "            local coverDistanceToTarget = cover.position:Distance(target)",
                    "            if coverDistanceToTarget <= distanceToTarget then",
                    "                loc.coverSpot = cover",
                    "                distanceToTarget = coverDistanceToTarget",
                    "            end",
                    "        end",
                    "        ::continue::",
                    "    end",
                    "end"
                  ]
                },
                {
                  "name": "Send message to every soldier",
                  "id": "771f542e-f62b-43da-9040-369b12d1dc46",
                  "type": "scriptAction",
                  "script": [
                    "local orderName = arg.orderData.orderName",
                    "",
                    "local firstSoldier = GetFirstSoldier(loc.updateData, loc.move)",
                    "if firstSoldier == nil then end",
                    "",
                    "local pos = firstSoldier:GetPosition()",
                    "local target = arg.orderData.position",
                    "local dir = target - pos",
                    "local dirNormalized = dir:Normalized()",
                    "local perp = dirNormalized:RightPerpendicularXY()",
                    "",
                    "local startStepDistance = 15",
                    "local defaultStepDistance = 30",
                    "",
                    "local moveDistance = defaultStepDistance",
                    "if (not loc.moveStarted) then",
                    "    moveDistance = startStepDistance",
                    "end",
                    "",
                    "local moveSoldierCount = 0",
                    "",
                    "for i, data in ipairs(loc.updateData) do",
                    "",
                    "",
                    "    if data.state == loc.move then",
                    "        moveSoldierCount = moveSoldierCount + 1",
                    "        -- prepare data for multiple points",
                    "        local offset = moveSoldierCount - 1",
                    "        local offsetPositions = {}",
                    "",
                    "        local nextPos = nil",
                    "        if loc.coverSpot ~= nil then",
                    "            nextPos = loc.coverSpot.position",
                    "            loc.moveStarted = false",
                    "        else",
                    "            dirNormalized = (target - pos):Normalized()",
                    "            perp = dirNormalized:RightPerpendicularXY()",
                    "            nextPos = loc.path:PositionAlongPath(math.min(moveDistance, pos:Distance(target)))",
                    "            loc.moveStarted = true",
                    "        end",
                    "",
                    "        local offsetPos = nextPos + offset * perp ",
                    "        table.insert(offsetPositions, offsetPos)",
                    "        -- end",
                    "",
                    "        arg.orderData.offsetPositions = offsetPositions",
                    "        arg.orderData.state = loc.move",
                    "        self:SendMessage(",
                    "                data.unit, ",
                    "                orderName,",
                    "                arg.orderData)",
                    "    end",
                    "    if data.state == loc.cover then",
                    "        ",
                    "        arg.orderData.stance = 0",
                    "        if loc.previousCoverSpot ~= nil then",
                    "            arg.orderData.stance = loc.previousCoverSpot.stance + 1",
                    "        end",
                    "",
                    "",
                    "        arg.orderData.state = loc.cover",
                    "        self:SendMessage(",
                    "            data.unit, ",
                    "            orderName,",
                    "            arg.orderData)",
                    "    end",
                    "end",
                    "",
                    "loc.orderReady = false"
                  ]
                },
                {
                  "name": "Order response",
                  "id": "3088c855-bdfe-472c-9b35-9ea749861600",
                  "type": "waitUntil",
                  "condition": [
                    "loc.orderReady"
                  ]
                }
              ],
              "decorators": [
                {
                  "id": "54530ce9-536d-48bc-9425-51c85f2ee9aa",
                  "type": "loopForever",
                  "name": "Loop Forever"
                }
              ]
            }
          ],
          "active": true
        },
        {
          "name": "Check dead soldiers",
          "id": "53347215-4595-4d31-9145-cb3a137bdd5d",
          "type": "scriptAction",
          "script": [
            "for i, data in ipairs(loc.updateData) do",
            "    if data.unit and data.unit:Valid() and data.state ~= loc.deadState then",
            "        local health = data.unit:GetHealth()",
            "        if health <= 0 then",
            "            data.state = loc.deadState",
            "            DebugLog(\"SOLDIER DEAD: \" .. tostring(data.unit))",
            "            DebugLog(\"------------\")",
            "        end",
            "    end",
            "end",
            "",
            "",
            "loc.orderReady = CheckMoveOrderUpdate(loc.updateData, finishedEntity, loc.cover, loc.move)",
            "if (loc.orderReady) then",
            "    SwitchRoles(loc.updateData, loc.cover, loc.move)",
            "end"
          ]
        },
        {
          "name": "NewOrder",
          "id": "4ce9e26a-470e-4356-94ad-e6acc2f6c5f6",
          "type": "messageHandler",
          "handler": [
            "local message = msg",
            "DebugLog(\"Retreat order\")",
            "DebugLog(message.subject)",
            "if message.value then",
            "    for k, v in pairs(message.value) do",
            "        DebugLog(k .. \": \" .. tostring(v))",
            "    end",
            "end",
            "",
            "if message.subject == loc.moveOrderCompleted then",
            "    DebugLog(\"Move order completed\")",
            "    local finishedEntity = message.value[1]",
            "    loc.orderReady = CheckMoveOrderUpdate(loc.updateData, finishedEntity, loc.cover, loc.move)",
            "    if (loc.orderReady) then",
            "        DebugLog(\"ORDER READY FULLY, SWITCH ROLES\")",
            "        SwitchRoles(loc.updateData, loc.cover, loc.move)",
            "    end",
            "",
            "end",
            "    ",
            "",
            "DebugLog(\"------------\")"
          ]
        },
        {
          "name": "Debug sequence",
          "id": "e94d9362-1bff-4477-9ca5-b13cf71ac734",
          "type": "sequence",
          "subtrees": [
            {
              "name": "Debug covers",
              "id": "01f6ce22-5191-44aa-96d8-98c4eaae5ac2",
              "type": "scriptAction",
              "script": [
                "if loc.covers ~= nil then",
                "    for i, cover in ipairs(loc.covers) do",
                "        if cover.edgeStart and cover.edgeEnd then",
                "            DebugLine(",
                "                cover.position,",
                "                cover.position + Vec3(0, 0, 5),",
                "                0, 1, 0, 1 ",
                "            )",
                "",
                "            if cover.edgeStart and cover.edgeEnd then",
                "                DebugLine(cover.edgeStart, cover.edgeEnd, 0, 0, 1, 1)",
                "            end",
                "",
                "            if cover.firingPosition then",
                "                DebugLine(cover.position, cover.firingPosition, 1, 0, 0, 1)",
                "            end",
                "        end",
                "    end",
                "end",
                "",
                "",
                "if loc.coverArea ~= nil then",
                "    -- DEBUG POLYGON",
                "    for i = 1, #loc.coverArea.verts do",
                "        local a = loc.coverArea.verts[i]",
                "        local b = loc.coverArea.verts[(i % #loc.coverArea.verts) + 1]",
                "        DebugLine(a, b, 1, 1, 1, 1)",
                "    end",
                "",
                "    for i = 1, #loc.coverArea.verts do",
                "        local a = loc.coverArea.verts[i]",
                "        DebugLine(a, a + Vec3(0, 0, 5), 1, 1, 1, 1)",
                "    end",
                "",
                "    -- DEBUG POLYGON END",
                "end"
              ]
            },
            {
              "name": "Debug path",
              "id": "8319e276-61b8-47db-83fe-04856806bdce",
              "type": "scriptAction",
              "script": [
                "local firstSoldier = GetFirstSoldier(loc.updateData, loc.cover)",
                "if firstSoldier ~= nil then",
                "    local myPosition = firstSoldier:GetPosition()",
                "    local targetPosition = arg.orderData.position",
                "    local CORRECTION = Vec3(0,0,1.5)",
                "",
                "    if loc.path ~= nil then",
                "        local pathLength = loc.path:Length()",
                "        for i=1, math.floor(pathLength) do",
                "            local posOnPath = loc.path:PositionAlongPath(i-1)",
                "            local posOnPath2 = loc.path:PositionAlongPath(i)",
                "            DebugLine(posOnPath + CORRECTION, posOnPath2 + CORRECTION, 0, 1, 1, 1)",
                "        end",
                "    end",
                "end"
              ]
            },
            {
              "name": "Debug cover area",
              "id": "7382235e-0cb3-4c1c-b099-dd5fd40cc7d5",
              "type": "scriptAction",
              "script": [
                "if loc.enemiesAreaPoints ~= nil then",
                "    local area = {polygon = Polygon(loc.enemiesAreaPoints), verts = loc.enemiesAreaPoints }",
                "",
                "    if area ~= nil then",
                "        -- DEBUG POLYGON",
                "        for i = 1, #area.verts do",
                "            local a = area.verts[i]",
                "            local b = area.verts[(i % #area.verts) + 1]",
                "            DebugLine(a, b, 1, 1, 0, 1)",
                "        end",
                "",
                "        for i = 1, #area.verts do",
                "            local a = area.verts[i]",
                "            DebugLine(a, a + Vec3(0, 0, 5), 1, 1, 0, 1)",
                "        end",
                "",
                "        -- DEBUG POLYGON END",
                "    end",
                "end"
              ]
            }
          ],
          "decorators": [
            {
              "id": "6551afc7-ac61-4568-ac2f-a67905087be8",
              "type": "loopForever",
              "name": "Loop forever"
            }
          ]
        }
      ]
    }
  ],
  "meta": {
    "nodesInfo": [
      {
        "id": "5e53c10e-e460-4051-b8dc-5c4d74c180cf",
        "position": "2660,766.953571428571"
      },
      {
        "id": "b81ec0d6-b111-44fe-bc1b-c2d0223d6ec3",
        "position": "2335,916.953571428571"
      },
      {
        "id": "30f7eafd-e1ac-4198-af6c-1c78091bd2dc",
        "position": "2522.5,916.953571428571"
      },
      {
        "id": "c969f41d-f475-4a90-adbb-363180db33d1",
        "position": "2710,916.953571428571"
      },
      {
        "id": "2b4db328-6cfb-4b6f-9d35-624f503eefe9",
        "position": "3360,954.453571428571"
      },
      {
        "id": "d2761efa-0615-40b3-ba21-f4cdfe95f665",
        "position": "2358,1229.45357142857"
      },
      {
        "id": "9d4a9a1e-7a63-4501-b433-e5b21c39eccf",
        "position": "1372.5,1416.95357142857"
      },
      {
        "id": "370f83f1-3c48-4d02-bd06-ff1ea8b512f2",
        "position": "3222.5,1354.45357142857"
      },
      {
        "id": "a390967c-24b8-4c30-98df-94948a04328b",
        "position": "2235,1516.95357142857"
      },
      {
        "id": "ccb8a974-dcc4-4b0f-a6e6-2c08f14caa09",
        "position": "1760,1679.45357142857"
      },
      {
        "id": "29793eeb-a9f9-4766-bb5f-714695bb56a1",
        "position": "1985,1679.45357142857"
      },
      {
        "id": "9db1807c-e571-4ebd-9fdb-e4ca9a3f6d94",
        "position": "2235,1679.45357142857"
      },
      {
        "id": "97bc9c16-b2eb-4517-8c5a-c75bbd5165eb",
        "position": "2460,1679.45357142857"
      },
      {
        "id": "9ee21c46-225d-4801-8a47-9870391a5124",
        "position": "2960,1529.45357142857"
      },
      {
        "id": "88dfa407-8333-4a74-bc3d-58930ab7f9ac",
        "position": "3210,1529.45357142857"
      },
      {
        "id": "771f542e-f62b-43da-9040-369b12d1dc46",
        "position": "3435,1529.45357142857"
      },
      {
        "id": "3088c855-bdfe-472c-9b35-9ea749861600",
        "position": "3722.5,1529.45357142857",
        "height": 50.0
      },
      {
        "id": "53347215-4595-4d31-9145-cb3a137bdd5d",
        "position": "3360,1204.45357142857"
      },
      {
        "id": "4ce9e26a-470e-4356-94ad-e6acc2f6c5f6",
        "position": "3672.5,1191.95357142857"
      },
      {
        "id": "e94d9362-1bff-4477-9ca5-b13cf71ac734",
        "position": "4185,1029.45357142857"
      },
      {
        "id": "01f6ce22-5191-44aa-96d8-98c4eaae5ac2",
        "position": "3947.5,1191.95357142857"
      },
      {
        "id": "8319e276-61b8-47db-83fe-04856806bdce",
        "position": "4185,1191.95357142857"
      },
      {
        "id": "7382235e-0cb3-4c1c-b099-dd5fd40cc7d5",
        "position": "4422.5,1191.95357142857"
      }
    ],
    "editorObjects": [],
    "canvasSize": "5054.5,3229.45357142857",
    "gridPadding": "10,4.45357142857114"
  },
  "parameters": [
    {
      "name": "orderData",
      "isOptional": false,
      "defaultValue": "",
      "evaluation": "passByReference"
    }
  ],
  "locals": {
    "updateData": "nil",
    "currentSoldier": "nil",
    "orderReady": "true",
    "move": "\"move\"",
    "cover": "\"cover\"",
    "moveOrderCompleted": "\"MoveOrderCompleted\"",
    "done": "\"done\"",
    "wait": "\"Wait\"",
    "reachThreshold": "15",
    "moveStarted": "false",
    "nearestPoints": "nil",
    "deadState": "\"dead\"",
    "covers": "nil",
    "coversRequest": "nil",
    "coverArea": "nil",
    "coverSpot": "nil",
    "previousCoverSpot": "nil",
    "pathRequest": "nil",
    "path": "nil",
    "switch": "false",
    "enemiesAreaPoints": "nil"
  }
}