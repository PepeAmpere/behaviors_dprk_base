{
  "name": "Sequence",
  "id": "5e53c10e-e460-4051-b8dc-5c4d74c180cf",
  "type": "sequence",
  "subtrees": [
    {
      "name": "Setup updateData",
      "id": "b81ec0d6-b111-44fe-bc1b-c2d0223d6ec3",
      "type": "scriptAction",
      "script": [
        "loc.updateData = {}",
        "",
        "local group = self",
        "local count = group:GetEntityCount()",
        "DebugLog(\"Count: \" .. count)",
        "",
        "for i = 0, count - 1 do",
        "    local soldier = group:GetEntity(i)",
        "    if soldier and soldier:Valid() then",
        "        table.insert(loc.updateData, {",
        "            unit = soldier,",
        "            index = i,",
        "            state = \"unknown\",",
        "            hasDoneOrder = false",
        "        })",
        "        DebugLog(\"Soldier: \" .. soldier)",
        "    end",
        "end",
        "DebugLog(\"------------\")"
      ]
    },
    {
      "name": "Setup roles",
      "id": "30f7eafd-e1ac-4198-af6c-1c78091bd2dc",
      "type": "scriptAction",
      "script": [
        "local data = loc.updateData",
        "local total = #data",
        "local half = math.floor(total / 2)",
        "",
        "for i, soldierData in ipairs(data) do",
        "    if i <= half then",
        "        soldierData.state = loc.move",
        "    else",
        "        soldierData.state = loc.cover",
        "    end",
        "    DebugLog(\"Unit \" .. i .. \" assigned state: \" .. soldierData.state)",
        "end",
        "DebugLog(\"------------\")"
      ]
    },
    {
      "name": "Set start pos",
      "id": "c969f41d-f475-4a90-adbb-363180db33d1",
      "type": "scriptAction",
      "script": [
        "local firstSoldier = loc.updateData[1].unit",
        "",
        "arg.orderData.startPos = firstSoldier:GetPosition()"
      ]
    },
    {
      "name": "Supervised Parallel",
      "id": "2b4db328-6cfb-4b6f-9d35-624f503eefe9",
      "type": "supervisedParallel",
      "subtrees": [
        {
          "name": "Run actions",
          "id": "d2761efa-0615-40b3-ba21-f4cdfe95f665",
          "type": "selector",
          "subtrees": [
            {
              "name": "Set order Wait ",
              "id": "9d4a9a1e-7a63-4501-b433-e5b21c39eccf",
              "type": "scriptAction",
              "decorators": [
                {
                  "id": "b35396b1-ef52-4f0d-9e01-d3ae4b32902d",
                  "type": "scriptCondition",
                  "name": "Order update",
                  "script": [
                    "return loc.orderReady"
                  ]
                },
                {
                  "id": "782bb409-0790-4060-a6e6-0754242b88ce",
                  "type": "scriptCondition",
                  "name": "Is Team Close To Target Position",
                  "script": [
                    "return IsTeamCloseToTargetPosition(loc.reachThreshold, arg.orderData.position, loc.updateData)"
                  ]
                }
              ],
              "script": [
                "arg.orderData.orderName = loc.wait",
                "local orderName = loc.wait",
                "DebugLog(\"DONE DONE DONE DONE\")",
                "",
                "for i, data in ipairs(loc.updateData) do",
                "    self:SendMessage(",
                "            data.unit, ",
                "            orderName,",
                "            arg.orderData)",
                "    DebugLog(\"Send message to: \" .. data.unit .. \" with orderName: \" .. orderName)",
                "end"
              ]
            },
            {
              "name": "Send order to soldier sequence",
              "id": "370f83f1-3c48-4d02-bd06-ff1ea8b512f2",
              "type": "sequence",
              "subtrees": [
                {
                  "name": "Send message to every soldier",
                  "id": "771f542e-f62b-43da-9040-369b12d1dc46",
                  "type": "scriptAction",
                  "script": [
                    "local orderName = arg.orderData.orderName",
                    "",
                    "local firstSoldier = GetFirstMoveSoldier(loc.updateData, loc.move)",
                    "if firstSoldier == nil then end",
                    "",
                    "local pos = firstSoldier:GetPosition()",
                    "local target = arg.orderData.position",
                    "local dir = target - pos",
                    "local dirNormalized = dir:Normalized()",
                    "local perp = dirNormalized:RightPerpendicularXY()",
                    "",
                    "local spacing = 2.0",
                    "local count = 2",
                    "local mid = math.floor(count / 2)",
                    "",
                    "local startStepDistance = 15",
                    "local defaultStepDistance = 30",
                    "",
                    "local moveDistance = defaultStepDistance",
                    "if (not loc.moveStarted) then",
                    "    moveDistance = startStepDistance",
                    "end",
                    "",
                    "for i, data in ipairs(loc.updateData) do",
                    "",
                    "",
                    "    if data.state == loc.move then",
                    "",
                    "        local nextPos = pos + math.min(moveDistance, pos:Distance(target)) * dirNormalized",
                    "",
                    "        local offset = (i - mid) * spacing",
                    "        local offsetPos = nextPos + offset * perp ",
                    "",
                    "        arg.orderData.offsetPosition = offsetPos",
                    "        arg.orderData.state = loc.move",
                    "        self:SendMessage(",
                    "                data.unit, ",
                    "                orderName,",
                    "                arg.orderData)",
                    "    end",
                    "    if data.state == loc.cover then",
                    "        arg.orderData.state = loc.cover",
                    "        self:SendMessage(",
                    "            data.unit, ",
                    "            orderName,",
                    "            arg.orderData)",
                    "    end",
                    "",
                    "end",
                    "",
                    "loc.moveStarted = true",
                    "loc.orderReady = false"
                  ]
                },
                {
                  "name": "Order response",
                  "id": "3088c855-bdfe-472c-9b35-9ea749861600",
                  "type": "waitUntil",
                  "condition": [
                    "loc.orderReady"
                  ]
                }
              ],
              "decorators": [
                {
                  "id": "54530ce9-536d-48bc-9425-51c85f2ee9aa",
                  "type": "loopForever",
                  "name": "Loop Forever"
                }
              ]
            }
          ],
          "active": true
        },
        {
          "name": "NewOrder",
          "id": "4ce9e26a-470e-4356-94ad-e6acc2f6c5f6",
          "type": "messageHandler",
          "handler": [
            "local message = msg",
            "DebugLog(\"Retreat order\")",
            "DebugLog(message.subject)",
            "if message.value then",
            "    for k, v in pairs(message.value) do",
            "        DebugLog(k .. \": \" .. tostring(v))",
            "    end",
            "end",
            "",
            "if message.subject == loc.moveOrderCompleted then",
            "    DebugLog(\"Move order completed\")",
            "    local finishedEntity = message.value[1]",
            "    loc.orderReady = CheckMoveOrderUpdate(loc.updateData, finishedEntity, loc.cover, loc.move)",
            "    if (loc.orderReady) then",
            "        SwitchRoles(loc.updateData, loc.cover, loc.move)",
            "    end",
            "",
            "end",
            "    ",
            "",
            "DebugLog(\"------------\")"
          ]
        }
      ]
    }
  ],
  "unlinked-trees": [
    {
      "name": "Succeed",
      "id": "156d780f-bb42-4ad2-9512-2f0313507a0c",
      "type": "success",
      "meta": {
        "nodesInfo": [
          {
            "id": "156d780f-bb42-4ad2-9512-2f0313507a0c",
            "position": "1775,963"
          }
        ],
        "editorObjects": []
      }
    },
    {
      "name": "Is Team Not Too Close To Target Position",
      "id": "f0b459de-2197-400e-a500-3d932d7c16ec",
      "type": "scriptCondition",
      "meta": {
        "nodesInfo": [
          {
            "id": "f0b459de-2197-400e-a500-3d932d7c16ec",
            "position": "2862.5,575.5"
          }
        ],
        "editorObjects": []
      },
      "script": [
        "return not IsTeamCloseToTargetPosition(loc.reachThreshold, arg.orderData.position, loc.updateData)"
      ]
    }
  ],
  "meta": {
    "nodesInfo": [
      {
        "id": "5e53c10e-e460-4051-b8dc-5c4d74c180cf",
        "position": "1975,250.5"
      },
      {
        "id": "b81ec0d6-b111-44fe-bc1b-c2d0223d6ec3",
        "position": "1650,400.5"
      },
      {
        "id": "30f7eafd-e1ac-4198-af6c-1c78091bd2dc",
        "position": "1837.5,400.5"
      },
      {
        "id": "c969f41d-f475-4a90-adbb-363180db33d1",
        "position": "2025,400.5"
      },
      {
        "id": "2b4db328-6cfb-4b6f-9d35-624f503eefe9",
        "position": "2225,388"
      },
      {
        "id": "d2761efa-0615-40b3-ba21-f4cdfe95f665",
        "position": "2025,513"
      },
      {
        "id": "9d4a9a1e-7a63-4501-b433-e5b21c39eccf",
        "position": "1700,600.5"
      },
      {
        "id": "370f83f1-3c48-4d02-bd06-ff1ea8b512f2",
        "position": "2200,625.5"
      },
      {
        "id": "771f542e-f62b-43da-9040-369b12d1dc46",
        "position": "2012.5,838"
      },
      {
        "id": "3088c855-bdfe-472c-9b35-9ea749861600",
        "position": "2352,838",
        "width": 145.0,
        "height": 50.0
      },
      {
        "id": "4ce9e26a-470e-4356-94ad-e6acc2f6c5f6",
        "position": "2562.5,625.5"
      }
    ],
    "editorObjects": [],
    "canvasSize": "3840,2713",
    "gridPadding": "0,0.5"
  },
  "parameters": [
    {
      "name": "orderData",
      "isOptional": false,
      "defaultValue": "",
      "evaluation": "passByReference"
    }
  ],
  "locals": {
    "updateData": "nil",
    "currentSoldier": "nil",
    "orderReady": "true",
    "move": "\"move\"",
    "cover": "\"cover\"",
    "moveOrderCompleted": "\"MoveOrderCompleted\"",
    "done": "\"done\"",
    "wait": "\"Wait\"",
    "reachThreshold": "10",
    "moveStarted": "false"
  }
}