{
  "name": "Root",
  "id": "642d54ac-5264-4899-bc7b-659fbff9b208",
  "type": "sequence",
  "subtrees": [
    {
      "name": "Start Finding Path",
      "id": "556ac526-f5f3-48b2-aaec-f17ee1450a9e",
      "type": "scriptAction",
      "script": [
        "if type(arg.orderData.entityToFireAt) == \"Entity\" then",
        "    loc.targetPosition = arg.orderData.entityToFireAt:GetPosition()",
        "else",
        "    loc.targetPosition = arg.orderData.entityToFireAt",
        "end",
        "",
        "loc.pathRequest = FindPath(self:GetPosition(), loc.targetPosition)"
      ]
    },
    {
      "name": "Shoot or pursue",
      "id": "00751dd7-e0ee-42d8-b9ba-e45a708bcb4b",
      "type": "selector",
      "subtrees": [
        {
          "name": "Fire",
          "id": "fae35639-4483-447c-83ec-49a08a932e24",
          "type": "reference",
          "decorators": [
            {
              "id": "aa179bef-8857-4277-ab8e-ee7414bdfa8b",
              "type": "scriptCondition",
              "name": "Should just fire",
              "script": [
                "if loc.pathRequest ~= nil and loc.pathRequest:IsReady() then",
                "    loc.path = loc.pathRequest:Value()",
                "    loc.pathRequest = nil",
                "end",
                "",
                "local current_muzzle_point = self:GetMuzzlePoint()",
                "local current_aim_point = arg.orderData.entityToFireAt:GetAimPoint()",
                "",
                "local MUZZLE_DELTA_TO_INVALIDATE = 3",
                "local RAYCAST_LENGTH_DIFFERENCE_TO_SKIP = 1",
                "if loc.raycast == nil or (loc.raycast.startPos:Distance(self:GetMuzzlePoint()) > MUZZLE_DELTA_TO_INVALIDATE) then",
                "    local delta = -1",
                "    if loc.raycast then delta = loc.raycast.delta end",
                "    loc.raycast = {",
                "        delta = delta,",
                "        value = nil,",
                "        startPos = current_muzzle_point,",
                "        future = Raycast(current_muzzle_point, current_aim_point),",
                "        usedMuzzlePoint = current_muzzle_point,",
                "        usedAimPoint = current_aim_point",
                "    }",
                "end",
                "if loc.raycast.future ~= nil and loc.raycast.future:IsReady() then ",
                "    loc.raycast.value = loc.raycast.future:Value()",
                "    loc.raycast.delta = math.abs(loc.raycast.value - loc.raycast.usedMuzzlePoint:Distance(loc.raycast.usedAimPoint))",
                "    loc.raycast.future = nil",
                "end",
                "",
                "if loc.raycast.delta >= 0 and loc.raycast.delta > RAYCAST_LENGTH_DIFFERENCE_TO_SKIP then",
                "    --DebugLog(tostring(self) .. \" enemy is obstructed!\")",
                "    return false",
                "end",
                "",
                "",
                "if loc.path == nil then",
                "    --DebugLog(tostring(self) .. \" no path to enemy!\")",
                "    return true",
                "end",
                "",
                "",
                "local path_length = loc.path:Length()",
                "loc.pathLength = path_length",
                "",
                "if not ((mic.MIN_PATH_LENGTH_TO_PURSUE_ENEMY < path_length) and (path_length < mic.MAX_PATH_LENGTH_TO_PURSUE_ENEMY)) then",
                "    --DebugLog(tostring(self) .. \" enemy too far! (\" .. tostring(path_length) .. \")\")",
                "    return true",
                "end",
                "",
                "if loc.timer == nil then loc.timer = TimedCounter() end",
                "if loc.timer:CurrentValue() == 0 then",
                "    loc.timer = loc.timer:Incremented(2, mic.ELIMINATE_SHOOTING_DURATION):Incremented(-1, mic.ELIMINATE_SHOOTING_DURATION + mic.ELIMINATE_PURSUE_DURATION)",
                "end",
                "",
                "",
                "--DebugLog(tostring(self) .. \" enemy counter: \" .. tostring(loc.timer:CurrentValue()))",
                "return (loc.timer:CurrentValue() >= 0)"
              ]
            },
            {
              "id": "c5196ef2-05be-4c42-a0a2-c64c33858c17",
              "type": "succeeder",
              "name": "Always Succeed"
            }
          ],
          "target": [
            "behaviors_dprk_team",
            "soldierFireAt"
          ],
          "arguments": {
            "orderData": "arg.orderData"
          }
        },
        {
          "name": "Pursue",
          "id": "6550fc48-e308-497f-981a-b82d90c4c72f",
          "type": "reference",
          "decorators": [
            {
              "id": "93b15408-4142-4257-a79a-4029ef61e542",
              "type": "scriptAction",
              "name": "Prepare args",
              "script": [
                "loc.orderDataTemp = {",
                "    entityToFollow = arg.orderData.entityToFireAt",
                "}"
              ]
            }
          ],
          "target": [
            "behaviors_dprk_team",
            "soldierFollow"
          ],
          "arguments": {
            "orderData": "loc.orderDataTemp"
          }
        }
      ],
      "decorators": [
        {
          "id": "93471f7a-3517-40e2-8805-b04fe979711b",
          "type": "loopForever",
          "name": "Main Loop"
        }
      ],
      "active": true
    }
  ],
  "meta": {
    "nodesInfo": [
      {
        "id": "642d54ac-5264-4899-bc7b-659fbff9b208",
        "position": "2075,198.166666666667"
      },
      {
        "id": "556ac526-f5f3-48b2-aaec-f17ee1450a9e",
        "position": "1900,310.666666666667"
      },
      {
        "id": "00751dd7-e0ee-42d8-b9ba-e45a708bcb4b",
        "position": "2187.5,323.166666666667"
      },
      {
        "id": "fae35639-4483-447c-83ec-49a08a932e24",
        "position": "2050,523.166666666667"
      },
      {
        "id": "6550fc48-e308-497f-981a-b82d90c4c72f",
        "position": "2325,535.666666666667"
      }
    ],
    "editorObjects": [],
    "canvasSize": "3905.33333333333,3060.66666666667",
    "gridPadding": "0,10.6666666666667"
  },
  "parameters": [
    {
      "name": "orderData",
      "isOptional": false,
      "defaultValue": "",
      "evaluation": "passEveryFrame"
    }
  ],
  "locals": {
    "pathRequest": "nil",
    "path": "nil",
    "targetPosition": "nil",
    "timer": "nil",
    "orderDataTemp": "nil",
    "pathLength": "nil",
    "raycast": "nil"
  }
}