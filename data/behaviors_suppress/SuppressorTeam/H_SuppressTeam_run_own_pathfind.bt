{
  "name": "Wait and listen",
  "id": "aac7685f-a6e1-48f2-9479-bb32b4d10ebb",
  "type": "supervisedParallel",
  "subtrees": [
    {
      "name": "Wait Forever",
      "id": "84a07f42-78eb-460c-9ab9-dcffc737164a",
      "type": "waitForever"
    },
    {
      "name": "Recalculate Leader",
      "id": "71c3f619-c407-48da-a306-695ed2bd4be3",
      "type": "scriptAction",
      "script": [
        "if loc.Leader ==nil or not loc.Leader:IsAlive() then",
        "    for entity in self:GetEntities() do",
        "        if entity:IsAlive() then",
        "            loc.Leader = entity",
        "            return ",
        "        end",
        "    end",
        "end"
      ]
    },
    {
      "name": "Reset target",
      "id": "642eaf35-0f04-4309-9c4b-a8f442c04094",
      "type": "scriptAction",
      "script": [
        "loc.target = arg.orderData.area.center;",
        "loc.target = Vec3(loc.target:X(), loc.target:Y(),loc.target:Z()+1);",
        "--DebugLog(tostring(self:IsClearSightTo(loc.target)));",
        "--DebugLog(tostring(arg.orderData.area.center));"
      ]
    },
    {
      "name": "Path calculation",
      "id": "628aeb2d-773b-4da4-a70f-42f5b6aa6cde",
      "type": "sequence",
      "subtrees": [
        {
          "name": "prepare data",
          "id": "2a259f74-b0f0-4930-9ab3-15ab737a7043",
          "type": "scriptAction",
          "script": [
            "loc.pathQuery = InternalTable()",
            "loc.pathQuery.startPosition = loc.Leader:GetPosition()",
            "loc.pathQuery.endPosition = loc.target"
          ]
        },
        {
          "name": "<unnamed>",
          "id": "1b081cdb-8e89-4219-90d3-b3e85608eccb",
          "type": "reference",
          "target": [
            "behaviors_suppress",
            "FindPathSquadSafe"
          ],
          "arguments": {
            "pathQuery": "return loc.pathQuery"
          }
        },
        {
          "name": "collect data",
          "id": "5f967604-d46a-4143-abc1-59240c6088c7",
          "type": "scriptAction",
          "script": [
            "loc.paths = {}",
            "",
            "for fireteam, queryData in pairs(loc.pathQuery) do",
            "    loc.paths[#loc.paths + 1] = loc.pathQuery.path",
            "end"
          ]
        },
        {
          "name": "define area",
          "id": "17143387-9e26-40cd-a1d1-203555235515",
          "type": "scriptAction",
          "script": [
            "loc.pointsAroundPath = {}",
            "",
            "local paths = loc.paths",
            "local allPointsData = loc.pointsAroundPath",
            "",
            "local spi, spl, lpi, lpl = FindPathsExtremes(paths)",
            "",
            "-- DebugLog(spi .. \" + \" .. spl .. \" + \" .. lpi .. \" + \" .. lpl)",
            "",
            "local lineStart = paths[lpi]:Start()",
            "local lineEnd = loc.target",
            "local directionVector = lineEnd - lineStart",
            "local direction = MathExt.Vec3ToHeading(directionVector)",
            "local unitVector = directionVector:Normalized()",
            "local unitVectorRight = unitVector:RightPerpendicularXY()",
            "local unitVectorLeft = -unitVectorRight",
            "",
            "-- bottom right",
            "allPointsData[#allPointsData + 1] = {",
            "    position = lineStart -100*unitVector + loc.CheckWidth*2*unitVectorRight,",
            "    direction = MathExt.Vec3ToHeading(directionVector),",
            "    r = 1, g = 0, b = 1, a = 1,            ",
            "}",
            "",
            "-- right",
            "for i=0, spl, 20 do",
            "    local mostRightIndex = 0",
            "    local mostRightDistance = 0",
            "    local mostRightPoint",
            "    for p=1, #paths do",
            "        local thisPathLenght = paths[p]:Length()",
            "        local mostRightCandidate = paths[p]:PositionAlongPath(paths[p]:Length() - spl + i)",
            "        local rightness = mostRightCandidate:DistanceToLineSegmentXY(lineStart, lineEnd)",
            "        local isRight = mostRightCandidate:IsLeftOfLine(lineEnd, direction + 180)",
            "        if",
            "            rightness > mostRightDistance and",
            "            isRight",
            "        then",
            "            mostRightIndex = p",
            "            mostRightDistance = rightness",
            "            mostRightPoint = mostRightCandidate",
            "        end",
            "    end",
            "    if mostRightPoint then",
            "        allPointsData[#allPointsData + 1] = {",
            "            position = mostRightPoint + loc.CheckWidth*unitVectorRight,",
            "            direction = MathExt.Vec3ToHeading(directionVector),",
            "            r = 0, g = 0, b = 1, a = 1,            ",
            "        }",
            "    end",
            "end",
            "",
            "-- top right",
            "allPointsData[#allPointsData + 1] = {",
            "    position = lineEnd + 100*unitVector + loc.CheckWidth*2*unitVectorRight,",
            "    direction = MathExt.Vec3ToHeading(directionVector),",
            "    r = 1, g = 0, b = 1, a = 1,            ",
            "}",
            "",
            "-- top left",
            "allPointsData[#allPointsData + 1] = {",
            "    position = lineEnd + 100*unitVector + loc.CheckWidth*2*unitVectorLeft,",
            "    direction = MathExt.Vec3ToHeading(directionVector),",
            "    r = 1, g = 0, b = 1, a = 1,            ",
            "}",
            "",
            "-- left",
            "for i=spl, 0, -20 do",
            "    local mostLeftIndex = 0",
            "    local mostLeftDistance = 0",
            "    local mostLeftPoint",
            "    for p=1, #paths do",
            "        local thisPathLenght = paths[p]:Length()",
            "        local mostLeftCandidate = paths[p]:PositionAlongPath(paths[p]:Length() - spl + i)",
            "        local leftness = mostLeftCandidate:DistanceToLineSegmentXY(lineStart, lineEnd)",
            "        local isLeft = mostLeftCandidate:IsLeftOfLine(lineStart, direction)",
            "        if",
            "            leftness > mostLeftDistance and",
            "            isLeft",
            "        then",
            "            mostLeftIndex = p",
            "            mostLeftDistance = leftness",
            "            mostLeftPoint = mostLeftCandidate",
            "        end",
            "    end",
            "    if mostLeftPoint then",
            "        allPointsData[#allPointsData + 1] = {",
            "            position = mostLeftPoint + loc.CheckWidth*unitVectorLeft,",
            "            direction = MathExt.Vec3ToHeading(directionVector),",
            "            r = 0, g = 0, b = 1, a = 1,            ",
            "        }",
            "    end",
            "end",
            "",
            "-- bottom left",
            "allPointsData[#allPointsData + 1] = {",
            "    position = lineStart -100*unitVector + loc.CheckWidth*2*unitVectorLeft,",
            "    direction = MathExt.Vec3ToHeading(directionVector),",
            "    r = 1, g = 0, b = 1, a = 1,            ",
            "}"
          ]
        },
        {
          "name": "Request Defilades",
          "id": "60f7a51a-2822-4b8f-8d6e-3dc36db34703",
          "type": "scriptAction",
          "script": [
            "if loc.defiladeFuture == nil then",
            "local simplePoints = {}",
            "for i=1, #loc.pointsAroundPath do",
            "    simplePoints[#simplePoints + 1] = loc.pointsAroundPath[i].position",
            "end",
            "local poly = Polygon(simplePoints);",
            "loc.defiladeFuture = FindDefiladeOnGrid(loc.Leader:GetPosition(), poly)",
            "end"
          ]
        },
        {
          "name": "Await Defilade",
          "id": "4fe92c37-c65e-4f5e-8ba9-4a676c616c85",
          "type": "waitUntil",
          "condition": [
            "if loc.defiladeFuture:IsReady() then",
            "    loc.defilades = loc.defiladeFuture:Value()",
            "",
            "    local distStT = (loc.target - loc.Leader:GetPosition()):Norm()",
            "    --DebugLog(\"distStT: \"..tostring(distStT))",
            "    --DebugLog(\"Original: \"..tostring(#loc.defilades))",
            "    for i=1, #loc.defilades do",
            "        if loc.defilades[i] == nil then",
            "            break -- the removes had happened",
            "        else",
            "            local distToTar = (loc.target - loc.defilades[i].position):Norm()",
            "            ",
            "            if distToTar>distStT then",
            "                --DebugLog(\"Purging: distToTar: \"..tostring(distToTar)..\">\"..tostring(distStT))",
            "                table.remove(loc.defilades,i)",
            "            else",
            "                loc.defiladesRayFutures[i] = Raycast(loc.defilades[i].position + Vec3(0, 0, 1), loc.target + Vec3(0, 0, 1))",
            "            end ",
            "        end",
            "    end",
            "    --DebugLog(\"Updated original: \"..tostring(#loc.defilades))",
            "    return true",
            "end",
            "return false"
          ]
        },
        {
          "name": "Await Rays",
          "id": "6d8452c4-9eca-46da-bd69-db4eb44c5132",
          "type": "waitUntil",
          "condition": [
            "if loc.pathFuture == nil then",
            "    for i,val in pairs(loc.defiladesRayFutures) do",
            "        if not val:IsReady() then ",
            "            return false",
            "        else ",
            "            --DebugLog(tostring(i))",
            "            local uDist = val:Value()",
            "            --DebugLog(tostring(uDist)..\"/\"..tostring((loc.target-self:GetPosition()):Norm()-arg.orderData.area.radius))",
            "            local v2target = loc.target-loc.defilades[i].position",
            "            if uDist > v2target:Norm()-arg.orderData.area.radius then ",
            "                local perp = Vec3(-v2target:Y(),v2target:X(),v2target:Z()):Normalized()",
            "                local offset = 0",
            "                ",
            "",
            "                loc.pathFuture = {}",
            "                local j = 1",
            "                for entity in self:GetEntities() do",
            "                    loc.pathFuture[j] = FindPath(entity:GetPosition(),loc.defilades[i].position+offset*perp)",
            "                    if offset>0 then offset = -offset else offset=- (offset - 6) end",
            "                    j = j+1",
            "                end",
            "                return true",
            "            end ",
            "        end",
            "        if i==#loc.defiladesRayFutures then",
            "            loc.panic = true",
            "            DebugLog(\"PANIC\")",
            "        end",
            "    end",
            "    return true",
            "else",
            "    loc.path = {}",
            "    for i,f in pairs(loc.pathFuture) do ",
            "        if f:IsReady() then",
            "            loc.path[i]=f:Value()",
            "        else",
            "            return false",
            "        end",
            "",
            "    end",
            "    return true",
            "end"
          ]
        }
      ],
      "decorators": [
        {
          "id": "9a3ddc4a-f9aa-414d-a08b-41983e970cd9",
          "type": "succeeder",
          "name": "Always Succeed"
        },
        {
          "id": "2e940880-bde8-4c0d-8ca1-be079c759499",
          "type": "scriptCondition",
          "name": "Recalculation needed?",
          "script": [
            "return loc.path ==nil and loc.target ~=nil --Add a check if the waypoint is changed maybe"
          ]
        }
      ]
    },
    {
      "name": "Can see Target?",
      "id": "767139df-2a75-4ede-9dc3-868373ff2ba5",
      "type": "selector",
      "subtrees": [
        {
          "name": "Move",
          "id": "2f7c12e9-1cc9-4f0a-bc89-6f99841f40e4",
          "type": "scriptAction",
          "decorators": [
            {
              "id": "9748139b-d03c-4fb2-800f-3dc5179b6f90",
              "type": "scriptCondition",
              "name": "LOS check",
              "script": [
                "return not loc.Leader:IsClearSightTo(loc.target);"
              ]
            },
            {
              "id": "a26a7043-0d11-4161-84dd-d1f7d3dad946",
              "type": "waitUntil",
              "name": "Is path ready?",
              "condition": [
                "return loc.path ~=nil and #loc.path>0"
              ]
            },
            {
              "id": "600aef44-60f0-40f9-8d1b-cfb5827ff411",
              "type": "scriptCondition",
              "name": "Close enough",
              "script": [
                "return loc.Leader:GetPosition():Distance(loc.path[1]:Goal())>4"
              ]
            }
          ],
          "script": [
            "local i = 1",
            "for member in self:GetEntities() do",
            "    standard_behaviors.order.IssueOrderToSubordinate(member, {[\"orderName\"] = \"Move\",[\"destination\"]=loc.path[i]:Goal()})--,arg.orderData)--",
            "    i = i+1",
            "end"
          ]
        },
        {
          "name": "Aim&Shoot",
          "id": "6dd44a91-4111-47ba-ac10-3a2c7971ade8",
          "type": "sequence",
          "subtrees": [
            {
              "name": "Aim",
              "id": "c05cde2e-e59f-47b1-8b42-6885fa2a0f36",
              "type": "scriptAction",
              "script": [
                "for member in self:GetEntities() do",
                "    if member:IsAlive() and member:GetType()==\"EntityBrain\" then",
                "    member:ReqHeadingAimAtPos(loc.target)",
                "end end"
              ]
            },
            {
              "name": "Attack",
              "id": "3331f722-891e-43f3-8ac0-1f0eb939a820",
              "type": "scriptAction",
              "script": [
                "local i = 1",
                "for member in self:GetEntities() do",
                "if member:HasClearShot(loc.target:Distance(member:GetPosition())) then",
                "    standard_behaviors.order.IssueOrderToSubordinate(member, arg.orderData)--{[\"orderName\"] = \"Suppress\",[\"area\"]=arg.orderData.area})--[\"area\"]=arg.orderData.area",
                "else ",
                "    local target = nil",
                "    if(loc.path==nil) then target = loc.target else target = loc.path[i]:Goal() end",
                "    standard_behaviors.order.IssueOrderToSubordinate(member, {[\"orderName\"] = \"Move\",[\"destination\"]=target})--,arg.orderData)--",
                "end",
                "i = i+1",
                "end"
              ]
            }
          ]
        }
      ],
      "active": true
    },
    {
      "name": "Draw Defilades",
      "id": "55f944b8-55cb-4ca9-b32b-f6c308537798",
      "type": "scriptAction",
      "script": [
        "--DebugLog(tostring(loc.defilades == nil))",
        "if loc.defilades ~=nil then",
        "--DebugLog(tostring(#loc.defilades))",
        "    for i=1, #loc.defilades do",
        "        --DebugLog(tostring(i))",
        "        --DebugLog(tostring(loc.defilades[i].position))",
        "        --DebugLine(self:GetPosition()+Vec3(0,0,2),loc.defilades[i].position+Vec3(0,0,2),1,0,0,1)",
        "        ai_core_public.draw.Circle(loc.defilades[i].position+Vec3(0,0,2),i/#loc.defilades,1,0,0,1)",
        "",
        "    end",
        "end",
        "if loc.path ~=nil then",
        "    for _,i in pairs(loc.path) do",
        "    ai_core_public.draw.Circle(i:Goal()+Vec3(0,0,2),1,1,1,0,1)",
        "end end"
      ]
    }
  ],
  "unlinked-trees": [
    {
      "name": "Fire",
      "id": "4f353c3d-56a0-4875-ae65-92b021ef3375",
      "type": "fire",
      "meta": {
        "nodesInfo": [
          {
            "id": "4f353c3d-56a0-4875-ae65-92b021ef3375",
            "position": "2905.31809523809,2050.5"
          }
        ],
        "editorObjects": []
      },
      "rounds": [
        "3"
      ],
      "forced": true
    }
  ],
  "meta": {
    "nodesInfo": [
      {
        "id": "aac7685f-a6e1-48f2-9479-bb32b4d10ebb",
        "position": "2067.81809523809,1263"
      },
      {
        "id": "84a07f42-78eb-460c-9ab9-dcffc737164a",
        "position": "1317.81809523809,1388"
      },
      {
        "id": "71c3f619-c407-48da-a306-695ed2bd4be3",
        "position": "1592.81809523809,1475.5"
      },
      {
        "id": "642eaf35-0f04-4309-9c4b-a8f442c04094",
        "position": "1767.81809523809,1488",
        "width": 145.0
      },
      {
        "id": "628aeb2d-773b-4da4-a70f-42f5b6aa6cde",
        "position": "1955.31809523809,1538"
      },
      {
        "id": "2a259f74-b0f0-4930-9ab3-15ab737a7043",
        "position": "730.318095238096,1750.5"
      },
      {
        "id": "1b081cdb-8e89-4219-90d3-b3e85608eccb",
        "position": "855.318095238096,1813"
      },
      {
        "id": "5f967604-d46a-4143-abc1-59240c6088c7",
        "position": "992.818095238096,1938"
      },
      {
        "id": "17143387-9e26-40cd-a1d1-203555235515",
        "position": "1055.3180952381,2000.5",
        "width": 145.0
      },
      {
        "id": "60f7a51a-2822-4b8f-8d6e-3dc36db34703",
        "position": "1142.8180952381,2063"
      },
      {
        "id": "4fe92c37-c65e-4f5e-8ba9-4a676c616c85",
        "position": "1305.31809523809,2063",
        "width": 145.0
      },
      {
        "id": "6d8452c4-9eca-46da-bd69-db4eb44c5132",
        "position": "1480.31809523809,2063"
      },
      {
        "id": "767139df-2a75-4ede-9dc3-868373ff2ba5",
        "position": "2367.81809523809,1713",
        "width": 145.0
      },
      {
        "id": "2f7c12e9-1cc9-4f0a-bc89-6f99841f40e4",
        "position": "2230.31809523809,1913"
      },
      {
        "id": "6dd44a91-4111-47ba-ac10-3a2c7971ade8",
        "position": "2545.99269841269,1878.15873015873"
      },
      {
        "id": "c05cde2e-e59f-47b1-8b42-6885fa2a0f36",
        "position": "2492.81809523809,1975.5"
      },
      {
        "id": "3331f722-891e-43f3-8ac0-1f0eb939a820",
        "position": "2692.81809523809,1988"
      },
      {
        "id": "55f944b8-55cb-4ca9-b32b-f6c308537798",
        "position": "2431.48476190476,1441.94696969697",
        "width": 145.0
      }
    ],
    "editorObjects": [],
    "canvasSize": "4395.31809523809,3963",
    "gridPadding": "5.31809523809635,0.5"
  },
  "parameters": [],
  "locals": {
    "target": "nil",
    "Leader": "nil",
    "path": "nil",
    "pathQuery": "nil",
    "paths": "nil",
    "pointsAroundPath": "nil",
    "CheckWidth": "10",
    "CheckDistance": "10",
    "defilades": "nil",
    "defiladeFuture": "nil",
    "defiladesRayFutures": "return {}",
    "panic": "return false",
    "pathFuture": "nil",
    "SubordinatesData": "nil"
  }
}